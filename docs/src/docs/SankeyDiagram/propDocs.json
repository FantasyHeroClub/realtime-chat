{
  "description": "A Sankey diagram is a type of flow diagram which represents",
  "methods": [],
  "props": {
    "nodes": {
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "object"
        }
      },
      "required": true,
      "description": "Array of node objects, represented by vertical rectangles.\nThese represent the base entities which links flow into & out of."
    },
    "links": {
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "shape",
          "value": {
            "source": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                }
              ],
              "required": false
            },
            "target": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                }
              ],
              "required": false
            },
            "value": {
              "name": "number",
              "required": false
            }
          }
        }
      },
      "required": true,
      "description": "Array of link objects, represented by curved paths between nodes.\nLinks represent a magnitude of flow between one node and another.\nEach should have a 'source' node [identifier], a 'target' node [identifier],\nand a numerical value representing flow magnitude."
    },
    "width": {
      "type": {
        "name": "number"
      },
      "required": true,
      "description": "Width of the SVG element.",
      "defaultValue": {
        "value": "400",
        "computed": false
      }
    },
    "height": {
      "type": {
        "name": "number"
      },
      "required": true,
      "description": "Height of the SVG element.",
      "defaultValue": {
        "value": "300",
        "computed": false
      }
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "`className` attribute to be applied to the SVG element.",
      "defaultValue": {
        "value": "\"\"",
        "computed": false
      }
    },
    "style": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Inline style object to be applied to the SVG element.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "showNodes": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Boolean which determines if node rectangles should be shown,\nor function (`showNode(node, graph)`) which returns a boolean",
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "showLinks": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Boolean which determines if link paths should be shown,\nor function (`showLink(link, graph)`) which returns a boolean",
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "showNodeLabels": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Boolean which determines if node labels should be shown,\nor function (`showLink(link, graph)`) which returns a boolean",
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "showLinkLabels": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Boolean which determines if node labels should be shown,\nor function (`showLink(link, graph)`) which returns a boolean",
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "nodeId": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Accessor function `nodeId(node, graph)` which specifies how to access the ID of each node object.\nThese should be the same identifiers used by `links[].source` and `.target`.\nUses the node's index in `nodes` array by default.",
      "defaultValue": {
        "value": "node => node.index",
        "computed": false
      }
    },
    "nodeWidth": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Width (in pixels) of the vertical node lines.",
      "defaultValue": {
        "value": "12",
        "computed": false
      }
    },
    "nodePadding": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Vertical padding (in pixels) between each of the node lines.",
      "defaultValue": {
        "value": "8",
        "computed": false
      }
    },
    "nodeAlignment": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "\"left\"",
            "computed": false
          },
          {
            "value": "\"right\"",
            "computed": false
          },
          {
            "value": "\"center\"",
            "computed": false
          },
          {
            "value": "\"justify\"",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "Node alignment method used to layout the nodes.\nMay be 'left', 'right', 'center', 'justify', or a custom function.\nSee [d3-sankey alignment docs](https://github.com/d3/d3-sankey#alignments) for more details.",
      "defaultValue": {
        "value": "\"justify\"",
        "computed": false
      }
    },
    "nodeClassName": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "`className` attribute to be applied to each node,\nor accessor function which returns a class (string).",
      "defaultValue": {
        "value": "\"\"",
        "computed": false
      }
    },
    "nodeStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Inline style object to be applied to each node,\nor accessor function which returns a style object.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "linkClassName": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Class attribute to be applied to each link,\nor accessor function which returns a class (string).",
      "defaultValue": {
        "value": "\"\"",
        "computed": false
      }
    },
    "linkStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Inline style object to be applied to each link,\nor accessor function which returns a style object.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "nodeLabelPlacement": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "enum",
            "value": [
              {
                "value": "\"before\"",
                "computed": false
              },
              {
                "value": "\"after\"",
                "computed": false
              },
              {
                "value": "\"above\"",
                "computed": false
              },
              {
                "value": "\"below\"",
                "computed": false
              }
            ]
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Placement of the node label relative to the node rectangle.\nExpects 'before', 'after', 'above' or 'below', or a function which returns one of these.\nBy default, labels in the left half of the diagram are placed 'after' and those in the right half 'before'",
      "defaultValue": {
        "value": "(node, graph) => {\n  return node.depth < graph.maxDepth / 2 ? \"after\" : \"before\";\n}",
        "computed": false
      }
    },
    "nodeLabelDistance": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "number"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Distance (in pixels) between nodes and their labels,\nor accessor function `f(node, graph)` which returns a distance.",
      "defaultValue": {
        "value": "4",
        "computed": false
      }
    },
    "nodeLabelText": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Accessor function `nodeLabelText(node, graph)` which returns the text to be used for node labels.",
      "defaultValue": {
        "value": "node => node.name",
        "computed": false
      }
    },
    "nodeLabelClassName": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "`className` attribute to be applied to each node label,\nor accessor function which returns a class (string).",
      "defaultValue": {
        "value": "\"\"",
        "computed": false
      }
    },
    "nodeLabelStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Inline style object to be applied to each node label,\nor accessor function which returns a style object.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "linkLabelText": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Accessor function `f(link, graph)` which returns the text to be used for link labels.",
      "defaultValue": {
        "value": "(link, graph, props) => {\n  const valueRelative = (link.value || 0) / _.get(link, \"source.value\", 0);\n  if (!_.isFinite(valueRelative)) return \"\";\n  const percentText = valueRelative < 0.001 ? \"<0.1%\" : numeral(valueRelative).format(\"0.[0]%\");\n  return `${percentText} to ${getValue(props.nodeLabelText, link.target, graph, props)}`;\n}",
        "computed": false
      }
    },
    "linkLabelClassName": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "`className` attribute to be applied to each link label,\nor accessor function which returns a class (string).",
      "defaultValue": {
        "value": "\"\"",
        "computed": false
      }
    },
    "linkLabelStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Inline style object to be applied to each link label,\nor accessor function which returns a style object.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "onMouseEnterNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseLeaveNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseMoveNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseDownNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseUpNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onClickNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseEnterNodeTerminal": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseLeaveNodeTerminal": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseMoveNodeTerminal": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseDownNodeTerminal": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseUpNodeTerminal": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onClickNodeTerminal": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseEnterLink": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseLeaveLink": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseMoveLink": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseDownLink": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseUpLink": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onClickLink": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "showNodeTerminals": {
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "nodeTerminalWidth": {
      "defaultValue": {
        "value": "5",
        "computed": false
      }
    },
    "nodeTerminalDistance": {
      "defaultValue": {
        "value": "1",
        "computed": false
      }
    },
    "nodeTerminalClassName": {
      "defaultValue": {
        "value": "\"\"",
        "computed": false
      }
    },
    "nodeTerminalStyle": {
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "nodeTerminalAttributes": {
      "defaultValue": {
        "value": "{rx: 2, ry: 2}",
        "computed": false
      }
    }
  }
}