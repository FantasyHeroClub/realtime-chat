{
  "description": "`RangeBarChart` is a variation on the standard bar chart. Just like a normal bar chart, each bar represents a single\nvalue on the *independent* axis (X axis for vertical bars), and is centered on this value.\nHowever, on the *dependent* axis, each bar represents a *range* (min/max) of values,\nrather than always starting at zero.",
  "methods": [
    {
      "name": "getDomain",
      "docblock": null,
      "modifiers": [
        "static"
      ],
      "params": [
        {
          "name": "props",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "getSpacing",
      "docblock": null,
      "modifiers": [
        "static"
      ],
      "params": [
        {
          "name": "props",
          "type": null
        }
      ],
      "returns": null
    }
  ],
  "props": {
    "scale": {
      "type": {
        "name": "custom",
        "raw": "CustomPropTypes.xyObjectOf(PropTypes.func.isRequired)"
      },
      "required": false,
      "description": "D3 scales for the X and Y axes of the chart, in {x, y} object format."
    },
    "data": {
      "type": {
        "name": "array"
      },
      "required": false,
      "description": "Array of data to be plotted. One bar will be rendered per datum in this array.",
      "defaultValue": {
        "value": "[]",
        "computed": false
      }
    },
    "horizontal": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Boolean which determines whether the chart will use horizontal or vertical bars.\nWhen `true`, bars will be horizontal, ie. the X-axis will be treated as the dependent axis.",
      "defaultValue": {
        "value": "false",
        "computed": false
      }
    },
    "getX": {
      "type": {
        "name": "custom",
        "raw": "CustomPropTypes.getter"
      },
      "required": false,
      "description": "Data getter for bar X-value, called once per bar (datum).\nIf `horizontal` is `false`, this gets the *independent* variable value on which the bar is centered.\nIf `horizontal` is `true`, this gets the start (minimum value) of the *dependent* variable range which is spanned by the bar's length."
    },
    "getXEnd": {
      "type": {
        "name": "custom",
        "raw": "CustomPropTypes.getter"
      },
      "required": false,
      "description": "Data getter for the end (maximum X-value) of the *dependent* variable range which is spanned by the bar's length.\nShould only be passed when `horizontal` is `true` (ignored otherwise)."
    },
    "getY": {
      "type": {
        "name": "custom",
        "raw": "CustomPropTypes.getter"
      },
      "required": false,
      "description": "Data getter for bar Y-value, called once per bar (datum).\nIf `horizontal` is `false`, this gets the start (minimum value) of the *dependent* variable range which is spanned by the bar's length.\nIf `horizontal` is `true`, this gets the *independent* variable value on which the bar is centered."
    },
    "getYEnd": {
      "type": {
        "name": "custom",
        "raw": "CustomPropTypes.getter"
      },
      "required": false,
      "description": "Data getter for the end (maximum Y-value) of the *dependent* variable range which is spanned by the bar's length.\nShould only be passed when `horizontal` is `false` (ignored otherwise)."
    },
    "barThickness": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Thickness (in pixels) of each bar (ie. bar height if `horizontal` is `true`, otherwise bar width).",
      "defaultValue": {
        "value": "8",
        "computed": false
      }
    },
    "barStyle": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Inline style object to be applied to each bar.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "barClassName": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Class attribute to be applied to each bar.",
      "defaultValue": {
        "value": "''",
        "computed": false
      }
    },
    "getClass": {
      "type": {
        "name": "custom",
        "raw": "CustomPropTypes.getter"
      },
      "required": false,
      "description": "Data getter for class attribute to be applied to each bar. Whereas `className` passes the same class to all\nbars, this is a function called once per bar, which gets the bar's datum as its first argument,\nso that each bar may determine its own className."
    },
    "onMouseMoveBar": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "`mousemove` event handler callback, called when user's mouse moves within a bar."
    },
    "onMouseEnterBar": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "`mouseenter` event handler callback, called when user's mouse enters a bar."
    },
    "onMouseLeaveBar": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "`mouseleave` event handler callback, called when user's mouse leaves a bar."
    }
  }
}