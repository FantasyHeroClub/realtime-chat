{"version":3,"sources":["../src/TreeMap.js"],"names":["CustomPropTypes","TreeMapNode","props","node","getLabel","nodeStyle","labelStyle","minLabelWidth","minLabelHeight","NodeLabelComponent","parentNames","depth","parent","x0","y0","x1","y1","parentName","get","nodeGroupClass","kebabCase","indexOf","className","style","position","width","height","top","left","transition","customStyle","isFunction","isObject","assign","handlers","reduce","eventName","handler","bind","Component","propTypes","shape","object","children","array","value","number","x","y","dx","dy","oneOfType","func","getter","defaultProps","TreeMapNodeLabel","TreeMap","data","_tree","getTree","_rootNode","getRootNode","cloneDeep","newProps","sticky","JSON","stringify","onClickNode","onMouseEnterNode","onMouseLeaveNode","onMouseMoveNode","NodeComponent","getValue","nodes","initTreemap","uniq","map","i","key","isRequired","getChildren","sort","padding","round","bool","mode","string","ratio","options","tiling","isUndefined","tree","tile","size","paddingOuter","rootNode","treeRoot","sum","d","isString","descendants"],"mappings":"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","file":"TreeMap.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport {hierarchy, treemap, treemapResquarify} from 'd3-hierarchy';\n\nimport {makeAccessor} from './utils/Data';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\n\nclass TreeMapNode extends React.Component {\n  static propTypes = {\n    node: PropTypes.shape({\n      parent: PropTypes.object,\n      children: PropTypes.array,\n      value: PropTypes.number,\n      depth: PropTypes.number,\n      x: PropTypes.number,\n      y: PropTypes.number,\n      dx: PropTypes.number,\n      dy: PropTypes.number\n    }),\n    nodeStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    minLabelWidth: PropTypes.number,\n    minLabelHeight: PropTypes.number,\n\n    getLabel: CustomPropTypes.getter,\n    labelStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    NodeLabelComponent: PropTypes.func\n  };\n  static defaultProps = {\n    minLabelWidth: 0,\n    minLabelHeight: 0\n  };\n\n  render() {\n    const {node, getLabel, nodeStyle, labelStyle, minLabelWidth, minLabelHeight, NodeLabelComponent, parentNames}\n      = this.props;\n    const {depth, parent, x0, y0, x1, y1} = node;\n\n    var parentName = _.get(parent, 'data.name');\n    const nodeGroupClass = parent ?\n      `node-group-${_.kebabCase(parentName)} node-group-i-${parentNames.indexOf(parentName)}` : '';\n    const className = `tree-map-node node-depth-${depth} ${nodeGroupClass}`;\n\n    let style = {position: 'absolute', width: (x1 - x0), height: (y1 - y0), top: y0, left: x0, transition: \"all .2s\"};\n    const customStyle = _.isFunction(nodeStyle) ? nodeStyle(node) : (_.isObject(nodeStyle) ? nodeStyle : {});\n    _.assign(style, customStyle);\n\n    let handlers = ['onClick', 'onMouseEnter', 'onMouseLeave', 'onMouseMove'].reduce((handlers, eventName) => {\n      const handler = this.props[`${eventName}Node`];\n      if(handler) handlers[eventName] = handler.bind(null, node);\n      return handlers;\n    }, {});\n\n    return <div {...{className, style}} {...handlers}>\n      {(x1 - x0) > minLabelWidth && (y1 - y0) > minLabelHeight ? // show label if node is big enough\n        <NodeLabelComponent {...{node, getLabel, labelStyle}} />\n        : null\n      }\n    </div>;\n  }\n}\n\nclass TreeMapNodeLabel extends React.Component {\n  static propTypes = {\n    node: PropTypes.object,\n    getLabel: CustomPropTypes.getter,\n    labelStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    minLabelWidth: PropTypes.number,\n    minLabelHeight: PropTypes.number\n  };\n\n  render() {\n    const {node, getLabel, labelStyle} = this.props;\n    const {x1, x0} = node;\n    let style = {width: (x1 - x0)};\n    const customStyle = _.isFunction(labelStyle) ? labelStyle(node) : (_.isObject(labelStyle) ? labelStyle : {});\n    _.assign(style, customStyle);\n\n    return <div className=\"node-label\" {...{style}}>\n      {makeAccessor(getLabel)(node)}\n    </div>\n  }\n}\n\nclass TreeMap extends React.Component {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n\n    data: PropTypes.object.isRequired,\n    getValue: CustomPropTypes.getter,\n    getChildren: CustomPropTypes.getter,\n    getLabel: CustomPropTypes.getter,\n\n    // options for d3 treemap layout - see d3 docs\n    sort: PropTypes.func,\n    padding: PropTypes.number,\n    round: PropTypes.bool,\n    sticky: PropTypes.bool,\n    mode: PropTypes.string,\n    ratio: PropTypes.number,\n\n    nodeStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    labelStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    minLabelWidth: PropTypes.number,\n    minLabelHeight: PropTypes.number,\n\n    onClickNode: PropTypes.func,\n    onMouseEnterNode: PropTypes.func,\n    onMouseLeaveNode: PropTypes.func,\n    onMouseMoveNode: PropTypes.func,\n\n    NodeComponent: PropTypes.func,\n    NodeLabelComponent: PropTypes.func\n  };\n  static defaultProps = {\n    getValue: 'value',\n    getChildren: 'children',\n    getLabel: 'name',\n    minLabelWidth: 0,\n    minLabelHeight: 0,\n    NodeComponent: TreeMapNode,\n    NodeLabelComponent: TreeMapNodeLabel\n  };\n  componentWillMount() {\n    const {data} = this.props;\n    // initialize the layout function\n    this._tree = getTree(this.props);\n    // clone the data because d3 mutates it!\n    this._rootNode = getRootNode(_.cloneDeep(data), this.props);\n  }\n  componentWillReceiveProps(newProps){\n    const {width, height, data, sticky} = this.props;\n\n   // if height, width, or the data changes, or if the treemap is not sticky, re-initialize the layout function\n   if(!sticky || width != newProps.width || height != newProps.height || JSON.stringify(data) != JSON.stringify(newProps.data))\n   {\n      this._tree = getTree(newProps);\n      this._rootNode = getRootNode(_.cloneDeep(newProps.data), this.props);\n    }\n  }\n  render() {\n    const {\n      width, height, nodeStyle, labelStyle, getLabel, minLabelWidth, minLabelHeight,\n      onClickNode, onMouseEnterNode, onMouseLeaveNode, onMouseMoveNode, NodeComponent, NodeLabelComponent, getValue\n    } = this.props;\n\n    const nodes = initTreemap(this._rootNode, this._tree, this.props);\n\n    const style = {position: 'relative', width, height};\n\n    const parentNames = _.uniq(_.map(nodes, 'parent.data.name'));\n\n    return <div className=\"tree-map\" {...{style}}>\n      {nodes.map((node, i) => <NodeComponent {...{\n        node, nodeStyle, minLabelWidth, minLabelHeight, labelStyle, getLabel, parentNames,\n        NodeLabelComponent, onClickNode, onMouseEnterNode, onMouseLeaveNode, onMouseMoveNode,\n        key: `node-${i}`\n      }} />)}\n    </div>;\n  }\n}\n\nfunction getRootNode(data, options){\n  const {getChildren} = options;\n  return hierarchy(data, makeAccessor(getChildren));\n}\n\nfunction getTree(options) {\n  const {width, height, ratio, round, padding} = options;\n  const tiling = !_.isUndefined(ratio) ? treemapResquarify.ratio(ratio) : treemapResquarify;\n  const tree = treemap().tile(tiling).size([width, height]);\n  if(!_.isUndefined(padding)) tree.paddingOuter(padding);\n  if(!_.isUndefined(round)) tree.round(round);\n  return tree;\n}\n\nfunction initTreemap(rootNode, tree, options) {\n  // create a d3 treemap layout function,\n  // and configure it with the given options\n  const {getValue, sort} = options;\n  const treeRoot = rootNode\n                .sum(d => {\n                  if(_.isFunction(getValue)) return getValue(d);\n                  else if(_.isString(getValue)) return d[getValue];\n                  else return 0;\n  });\n  return tree(sort ? treeRoot.sort(sort) : treeRoot).descendants();\n}\n\nexport default TreeMap;\n"]}