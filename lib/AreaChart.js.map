{"version":3,"sources":["../src/AreaChart.js"],"names":["CustomPropTypes","AreaChart","props","name","data","getX","getY","getYEnd","scale","isDifference","pathStyle","pathStylePositive","pathStyleNegative","shouldShowGaps","isDefined","accessors","x","y","yEnd","areaGenerator","defined","d","i","y0","y1","areaPathStr","height","clipBelowPathStr","clipAbovePathStr","chartId","uniqueId","clipAboveId","clipBelowId","pathStyleAbove","pathStyleBelow","Component","propTypes","array","isRequired","getter","object","bool","scaleType","func","defaultProps","isUndefined"],"mappings":"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","file":"AreaChart.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport {area} from 'd3';\n\nimport {makeAccessor, domainFromData, combineDomains} from './utils/Data';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\n\n// AreaChart represents a simple bivariate area chart,\n// a filled path drawn between two lines (datasets).\n\n// todo horizontal prop, for filling area horizontally?\n// todo support categorical data?\n// todo build StackedAreaChart that composes multiple AreaCharts\n\nexport default class AreaChart extends React.Component {\n  static propTypes = {\n    /**\n     * the array of data objects\n     */\n    data: PropTypes.array.isRequired,\n    /**\n     * data getter for X coordinates\n     */\n    getX: CustomPropTypes.getter,\n    /**\n     * data getter for Y coordinates\n     */\n    getY: CustomPropTypes.getter,\n    /**\n     * data getter for Y end coordinates\n     */\n    getYEnd: CustomPropTypes.getter,\n    /**\n     * style applied to path element\n     */\n    pathStyle: PropTypes.object,\n    /**\n     * if isDifference is true, AreaChart generates a \"difference chart\" with two area paths instead of one:\n     * one path which shows when YEnd > Y, and one vice versa, allowing them to be styled differently (eg red/green)\n     */\n    isDifference: PropTypes.bool,\n    /**\n     * when isDifference is true, pathStylePositive and pathStyleNegative can be passed to give 2 different inline\n     * styles to the two different paths which are generated.\n     * Ignored if isDifference is false.\n     */\n    pathStylePositive: PropTypes.object,\n    pathStyleNegative: PropTypes.object,\n\n    scaleType: PropTypes.object,\n    scale: PropTypes.object,\n    /**\n     * if true, will show gaps in the shaded area for data where props.isDefined(datum) returns false\n     */\n    shouldShowGaps: PropTypes.bool,\n    /**\n     * if shouldShowGaps is true, isDefined function describes when a datum should be considered \"defined\" vs. when to show gap\n     * by default, shows gap if either y or yEnd are undefined\n     */\n    isDefined: PropTypes.func\n  };\n  static defaultProps = {\n    shouldShowGaps: true,\n    isDefined: (d, i, accessors) => {\n      return !_.isUndefined(accessors.y(d, i)) && !_.isUndefined(accessors.yEnd(d, i));\n    }\n  };\n\n  static getDomain(props) {\n    // custom Y domain - the total (union) extent of getY and getYEnd combined\n    const {data, getX, getY, getYEnd} = props;\n    const accessors = {x: makeAccessor(getX), y: makeAccessor(getY), yEnd: makeAccessor(getYEnd)};\n    return {\n      y: combineDomains([\n        domainFromData(data, accessors.y),\n        domainFromData(data, accessors.yEnd)\n      ])\n    }\n  }\n\n  render() {\n    const {name, data, getX, getY, getYEnd, scale, isDifference, pathStyle,\n      pathStylePositive, pathStyleNegative, shouldShowGaps, isDefined} = this.props;\n    const accessors = {x: makeAccessor(getX), y: makeAccessor(getY), yEnd: makeAccessor(getYEnd)};\n\n    // create d3 area path generator\n    const areaGenerator = area();\n\n    // if gaps in data should be shown, use `props.isDefined` function as the `defined` param for d3's area generator;\n    // but wrap it & pass in accessors as well, so that the function can easily access the relevant data values\n    if(shouldShowGaps) {\n      areaGenerator.defined((d, i) => isDefined(d, i, accessors));\n    }\n\n    areaGenerator\n      .x((d, i) => scale.x(accessors.x(d, i)))\n      .y0((d, i) => scale.y(accessors.y(d, i)))\n      .y1((d, i) => scale.y(accessors.yEnd(d, i)));\n\n    const areaPathStr = areaGenerator(data);\n\n    if(isDifference) {\n      // difference chart - create 2 clip paths, one which clips to only show path where YEnd > Y, and other vice versa\n      areaGenerator.y0(this.props.height);\n      const clipBelowPathStr = areaGenerator(data);\n      areaGenerator.y0(0);\n      const clipAbovePathStr = areaGenerator(data);\n\n      // make sure we have a unique ID for this chart, so clip path IDs don't affect other charts\n      const chartId = name || _.uniqueId();\n      const clipAboveId = `clip-above-area-${chartId}`;\n      const clipBelowId = `clip-below-area-${chartId}`;\n      const pathStyleAbove = pathStylePositive || pathStyle || {};\n      const pathStyleBelow = pathStyleNegative || pathStyle || {};\n\n      return (<g className={`${name} area-chart`}>\n        <clipPath id={clipAboveId}>\n          <path d={clipAbovePathStr} />\n        </clipPath>\n        <clipPath id={clipBelowId}>\n          <path d={clipBelowPathStr} />\n        </clipPath>\n        <path className=\"area-chart-path\" d={areaPathStr} clipPath={`url(#${clipAboveId})`} style={pathStyleAbove} />\n        <path className=\"area-chart-path\" d={areaPathStr} clipPath={`url(#${clipBelowId})`} style={pathStyleBelow} />\n      </g>);\n\n    } else {\n      return (<g className={`${name} area-chart`}>\n        <path className=\"area-chart-path\" d={areaPathStr} style={pathStyle || {}} />\n      </g>);\n    }\n  }\n}\n"]}