{"version":3,"sources":["../src/BarChart.js"],"names":["CustomPropTypes","makeRangeBarChartProps","barChartProps","horizontal","getX","getY","getZero","constant","getXEnd","undefined","getYEnd","BarChart","nextProps","nextState","shouldUpdate","props","scale","rangeBarChartProps","getDomain","getSpacing","Component","propTypes","xyObjectOf","func","isRequired","data","array","getter","bool","barThickness","number","barClassName","string","barStyle","object","getClass","onMouseEnterBar","onMouseMoveBar","onMouseLeaveBar","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,e;;AACZ;;AACA;;AACA;;;;;;;;;;;;;;AAGA,SAASC,sBAAT,CAAgCC,aAAhC,EAA+C;AAC7C;AACA;AAF6C,MAGtCC,UAHsC,GAGZD,aAHY,CAGtCC,UAHsC;AAAA,MAG1BC,IAH0B,GAGZF,aAHY,CAG1BE,IAH0B;AAAA,MAGpBC,IAHoB,GAGZH,aAHY,CAGpBG,IAHoB;;AAI7C,MAAMC,UAAU,iBAAEC,QAAF,CAAW,CAAX,CAAhB;;AAEA,sBACKL,aADL;AAEEE,UAAMD,aAAaG,OAAb,GAAuBF,IAF/B;AAGEC,UAAMF,aAAaE,IAAb,GAAoBC,OAH5B;AAIEE,aAASL,aAAaC,IAAb,GAAoBK,SAJ/B;AAKEC,aAASP,aAAaM,SAAb,GAAyBJ;AALpC;AAOD;;AAED;;;;;;;;;;IAUqBM,Q;;;;;;;;;;;0CAiCGC,S,EAAWC,S,EAAW;AAC1C,UAAMC,eAAe,CAAC,4BAAa,KAAKC,KAAlB,EAAyBH,SAAzB,EAAoC,CAAC,UAAD,CAApC,CAAtB;AACA,aAAOE,YAAP;AACD;;;6BAEQ;AACP,+BAAU,wBAAY,KAAKC,KAAL,CAAWC,KAAvB,CAAV;;AAEA,UAAMC,qBAAqBhB,uBAAuB,KAAKc,KAA5B,CAA3B;;AAEA,aAAO,uDAAmBE,kBAAnB,CAAP;AACD;;;;;AAnBD;8BACiBF,K,EAAO;AACtB,aAAO,wBAAcG,SAAd,CAAwBjB,uBAAuBc,KAAvB,CAAxB,CAAP;AACD;;;+BACiBA,K,EAAO;AACvB,aAAO,wBAAcI,UAAd,CAAyBlB,uBAAuBc,KAAvB,CAAzB,CAAP;AACD;;;;EA/BmC,gBAAMK,S;;AAAvBT,Q,CACZU,S,GAAY;AACjBL,SAAOhB,gBAAgBsB,UAAhB,CAA2B,oBAAUC,IAAV,CAAeC,UAA1C,CADU;AAEjBC,QAAM,oBAAUC,KAFC;AAGjBtB,QAAMJ,gBAAgB2B,MAHL;AAIjBtB,QAAML,gBAAgB2B,MAJL;AAKjBxB,cAAY,oBAAUyB,IALL;;AAOjBC,gBAAc,oBAAUC,MAPP;AAQjBC,gBAAc,oBAAUC,MARP;AASjBC,YAAU,oBAAUC,MATH;AAUjBC,YAAUnC,gBAAgB2B,MAVT;;AAYjBS,mBAAiB,oBAAUb,IAZV;AAajBc,kBAAgB,oBAAUd,IAbT;AAcjBe,mBAAiB,oBAAUf;AAdV,C;AADAZ,Q,CAiBZ4B,Y,GAAe;AACpBd,QAAM,EADc;AAEpBtB,cAAY,KAFQ;AAGpB0B,gBAAc,CAHM;AAIpBE,gBAAc,EAJM;AAKpBE,YAAU;AALU,C;kBAjBHtB,Q","file":"BarChart.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport invariant from 'invariant';\nimport RangeBarChart from './RangeBarChart';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\nimport {hasXYScales} from './utils/Scale';\nimport {makeAccessor, domainFromData} from './utils/Data';\nimport xyPropsEqual from './utils/xyPropsEqual';\n\n\nfunction makeRangeBarChartProps(barChartProps) {\n  // this component is a simple wrapper around RangeBarChart,\n  // passing accessors to make range bars which span from zero to the data value\n  const {horizontal, getX, getY} = barChartProps;\n  const getZero = _.constant(0);\n\n  return {\n    ...barChartProps,\n    getX: horizontal ? getZero : getX,\n    getY: horizontal ? getY : getZero,\n    getXEnd: horizontal ? getX : undefined,\n    getYEnd: horizontal ? undefined : getY\n  };\n}\n\n/**\n * BarChart represents a basic \"Value/Value\" bar chart,\n * where each bar represents a single independent variable value and a single dependent value,\n * with bars that are centered horizontally on x-value and extend from 0 to y-value,\n * (or centered vertically on their y-value and extend from 0 to the x-value, in the case of horizontal chart variant)\n * eg. http://www.snapsurveys.com/wp-content/uploads/2012/10/bar_2d8.png\n *\n * For other bar chart types, see RangeBarChart and AreaBarChart\n */\n\nexport default class BarChart extends React.Component {\n  static propTypes = {\n    scale: CustomPropTypes.xyObjectOf(PropTypes.func.isRequired),\n    data: PropTypes.array,\n    getX: CustomPropTypes.getter,\n    getY: CustomPropTypes.getter,\n    horizontal: PropTypes.bool,\n\n    barThickness: PropTypes.number,\n    barClassName: PropTypes.string,\n    barStyle: PropTypes.object,\n    getClass: CustomPropTypes.getter,\n    \n    onMouseEnterBar: PropTypes.func,\n    onMouseMoveBar: PropTypes.func,\n    onMouseLeaveBar: PropTypes.func\n  };\n  static defaultProps = {\n    data: [],\n    horizontal: false,\n    barThickness: 8,\n    barClassName: '',\n    barStyle: {}\n  };\n\n  // gets data domain of independent variable\n  static getDomain(props) {\n    return RangeBarChart.getDomain(makeRangeBarChartProps(props));\n  }\n  static getSpacing(props) {\n    return RangeBarChart.getSpacing(makeRangeBarChartProps(props));\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, ['barStyle']);\n    return shouldUpdate;\n  }\n\n  render() {\n    invariant(hasXYScales(this.props.scale), `BarChart.props.scale.x and scale.y must both be valid d3 scales`);\n\n    const rangeBarChartProps = makeRangeBarChartProps(this.props);\n\n    return <RangeBarChart {...rangeBarChartProps} />;\n  }\n}\n"]}