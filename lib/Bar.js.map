{"version":3,"sources":["../src/Bar.js"],"names":["Bar","props","scale","xValue","xEndValue","yValue","yEndValue","thickness","style","onMouseEnter","onMouseMove","onMouseLeave","orientation","className","x","y","width","height","x0","x1","Math","min","abs","y0","y1","Component","propTypes","shape","func","isRequired","any","number","string","object","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEA;;;;;;;;;IASqBA,G;;;;;;;;;;;6BAmBV;AACP;AADO,mBAE0G,KAAKC,KAF/G;AAAA,UAEAC,KAFA,UAEAA,KAFA;AAAA,UAEOC,MAFP,UAEOA,MAFP;AAAA,UAEeC,SAFf,UAEeA,SAFf;AAAA,UAE0BC,MAF1B,UAE0BA,MAF1B;AAAA,UAEkCC,SAFlC,UAEkCA,SAFlC;AAAA,UAE6CC,SAF7C,UAE6CA,SAF7C;AAAA,UAEwDC,KAFxD,UAEwDA,KAFxD;AAAA,UAE+DC,YAF/D,UAE+DA,YAF/D;AAAA,UAE6EC,WAF7E,UAE6EA,WAF7E;AAAA,UAE0FC,YAF1F,UAE0FA,YAF1F;AAGP;;AAEA,+BAAU,wBAAY,KAAKV,KAAL,CAAWC,KAAvB,CAAV;AACA,+BAAU,uBAAYE,SAAZ,EAAuBE,SAAvB,CAAV;;AAEA,UAAMM,cAAc,2BAAYR,SAAZ,IAAyB,UAAzB,GAAsC,YAA1D;AACA,UAAMS,qCAAmCD,WAAnC,UAAkD,KAAKX,KAAL,CAAWY,SAAX,IAAwB,EAA1E,CAAN;;AAEA,UAAIC,UAAJ;AAAA,UAAOC,UAAP;AAAA,UAAUC,cAAV;AAAA,UAAiBC,eAAjB;AACA,UAAGL,gBAAgB,YAAnB,EAAiC;AAC/BG,YAAIb,MAAMa,CAAN,CAAQV,MAAR,IAAmBE,YAAY,CAAnC;AACA,YAAMW,KAAKhB,MAAMY,CAAN,CAAQX,MAAR,CAAX;AACA,YAAMgB,KAAKjB,MAAMY,CAAN,CAAQV,SAAR,CAAX;AACAU,YAAIM,KAAKC,GAAL,CAASH,EAAT,EAAaC,EAAb,CAAJ;AACAH,gBAAQI,KAAKE,GAAL,CAASH,KAAKD,EAAd,CAAR;AACAD,iBAASV,SAAT;AAED,OARD,MAQO;AAAE;AACPO,YAAIZ,MAAMY,CAAN,CAAQX,MAAR,IAAmBI,YAAY,CAAnC;AACA,YAAMgB,KAAKrB,MAAMa,CAAN,CAAQV,MAAR,CAAX;AACA,YAAMmB,KAAKtB,MAAMa,CAAN,CAAQT,SAAR,CAAX;AACAS,YAAIK,KAAKC,GAAL,CAASE,EAAT,EAAaC,EAAb,CAAJ;AACAP,iBAASG,KAAKE,GAAL,CAASE,KAAKD,EAAd,CAAT;AACAP,gBAAQT,SAAR;AACD;;AAED,aAAO,sCAAU;AACfO,YADe,EACZC,IADY,EACTC,YADS,EACFC,cADE;AAEfJ,4BAFe,EAEJL,YAFI;AAGdC,kCAHc,EAGAC,wBAHA,EAGaC;AAHb,OAAV,CAAP;AAKD;;;;EArD8B,gBAAMc,S;;AAAlBzB,G,CACZ0B,S,GAAY;AACjBxB,SAAO,oBAAUyB,KAAV,CAAgB,EAACb,GAAG,oBAAUc,IAAV,CAAeC,UAAnB,EAA+Bd,GAAG,oBAAUa,IAAV,CAAeC,UAAjD,EAAhB,CADU;AAEjB1B,UAAQ,oBAAU2B,GAFD;AAGjBzB,UAAQ,oBAAUyB,GAHD;AAIjB1B,aAAW,oBAAU0B,GAJJ;AAKjBxB,aAAW,oBAAUwB,GALJ;AAMjBvB,aAAW,oBAAUwB,MANJ;AAOjBlB,aAAW,oBAAUmB,MAPJ;AAQjBxB,SAAO,oBAAUyB;AARA,C;AADAjC,G,CAWZkC,Y,GAAe;AACpB/B,UAAQ,CADY;AAEpBE,UAAQ,CAFY;AAGpBE,aAAW,CAHS;AAIpBM,aAAW,EAJS;AAKpBL,SAAO;AALa,C;kBAXHR,G","file":"Bar.js","sourcesContent":["import React from 'react';\nimport invariant from 'invariant';\nimport isUndefined from 'lodash/isUndefined';\nimport {hasOneOfTwo} from './util';\nimport {hasXYScales} from './utils/Scale';\nimport PropTypes from 'prop-types';\n\n/**\n * Bar is a low-level component to be used in XYPlot-type charts (namely BarChart)\n * It is specified in terms of a range (min & max) of values on one axis (the bar's long axis)\n * and a single value on the other axis.\n * Passing props `xValue`, `xEndValue` and `yValue` specifies a horizontal bar,\n * centered on `yValue` and spanning from `xValue` to `xEndValue`;\n * passing props `xValue`, `yValue`, and `yEndValue' specifies a vertical bar.\n */\n\nexport default class Bar extends React.Component {\n  static propTypes = {\n    scale: PropTypes.shape({x: PropTypes.func.isRequired, y: PropTypes.func.isRequired}),\n    xValue: PropTypes.any,\n    yValue: PropTypes.any,\n    xEndValue: PropTypes.any,\n    yEndValue: PropTypes.any,\n    thickness: PropTypes.number,\n    className: PropTypes.string,\n    style: PropTypes.object\n  };\n  static defaultProps = {\n    xValue: 0,\n    yValue: 0,\n    thickness: 8,\n    className: '',\n    style: {}\n  };\n\n  render() {\n    //  x/yValue are values in the *data* domain, not pixel domain\n    const {scale, xValue, xEndValue, yValue, yEndValue, thickness, style, onMouseEnter, onMouseMove, onMouseLeave} = this.props;\n    // console.log('bar', this.props);\n\n    invariant(hasXYScales(this.props.scale), `Bar.props.scale.x and scale.y must both be valid d3 scales`);\n    invariant(hasOneOfTwo(xEndValue, yEndValue), `Bar expects an xEnd *or* yEnd prop, but not both.`);\n\n    const orientation = isUndefined(xEndValue) ? 'vertical' : 'horizontal';\n    const className = `chart-bar chart-bar-${orientation} ${this.props.className || ''}`;\n\n    let x, y, width, height;\n    if(orientation === 'horizontal') {\n      y = scale.y(yValue) - (thickness / 2);\n      const x0 = scale.x(xValue);\n      const x1 = scale.x(xEndValue);\n      x = Math.min(x0, x1);\n      width = Math.abs(x1 - x0);\n      height = thickness;\n\n    } else { // vertical\n      x = scale.x(xValue) - (thickness / 2);\n      const y0 = scale.y(yValue);\n      const y1 = scale.y(yEndValue);\n      y = Math.min(y0, y1);\n      height = Math.abs(y1 - y0);\n      width = thickness;\n    }\n\n    return <rect {...{\n      x, y, width, height,\n      className, style,\n       onMouseEnter, onMouseMove, onMouseLeave\n    }} />\n  }\n}\n"]}