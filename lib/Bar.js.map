{"version":3,"sources":["../src/Bar.js"],"names":["Bar","props","xScale","yScale","x","xEnd","y","yEnd","thickness","style","onMouseEnter","onMouseMove","onMouseLeave","orientation","className","rectX","rectY","width","height","x0","x1","Math","min","abs","y0","y1","Component","propTypes","oneOfType","number","string","instanceOf","Date","object","func","defaultProps"],"mappings":"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","file":"Bar.js","sourcesContent":["import React from 'react';\nimport invariant from 'invariant';\nimport isUndefined from 'lodash/isUndefined';\nimport {hasOneOfTwo} from './util';\nimport {hasXYScales} from './utils/Scale';\nimport PropTypes from 'prop-types';\n\n/**\n * Bar is a low-level component to be used in XYPlot-type charts (namely BarChart).\n * It is specified in terms of a range (min & max) of values on one axis (the bar's long axis)\n * and a single value on the other axis.\n * Passing props `x`, `xEnd` and `y` specifies a horizontal bar,\n * centered on `y` and spanning from `x` to `xEnd`;\n * passing props `x`, `y`, and `yEnd' specifies a vertical bar.\n */\n\nexport default class Bar extends React.Component {\n  static propTypes = {\n\n    /**\n     * For a vertical bar, `x` represents the X data value on which the bar is centered.\n     * For a horizontal bar, represents the *starting* X value of the bar, ie. the minimum of the range it spans\n     */\n    x: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]),\n    /**\n     * For a horizontal bar, `y` represents the Y data value on which the bar is centered.\n     * For a vertical bar, represents the *starting* Y value of the bar, ie. the minimum of the range it spans\n     */\n    y: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]),\n    /**\n     * For a horizontal bar, `xEnd` represents the *ending* X data value of the bar, ie. the maximum of the range it spans.\n     * Should be undefined if the bar is vertical.\n     */\n    xEnd: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]),\n    /**\n     * For a vertical bar, `yEnd` represents the *ending* Y data value of the bar, ie. the maximum of the range it spans.\n     * Should be undefined if the bar is horizontal.\n     */\n    yEnd: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]),\n\n    /**\n     * The thickness of the bar, in pixels. (width of vertical bar, or height of horizontal bar)\n     */\n    thickness: PropTypes.number,\n    /**\n     * Class name(s) to be included on the bar's <rect> element\n     */\n    className: PropTypes.string,\n    /**\n     * Inline style object to be included on the bar's <rect> element\n     */\n    style: PropTypes.object,\n    /**\n     * onMouseMove event handler callback, called when user's mouse moves within the bar.\n     */\n    onMouseMove: PropTypes.func,\n    /**\n     * onMouseEnter event handler callback, called when user's mouse enters the bar.\n     */\n    onMouseEnter: PropTypes.func,\n    /**\n     * onMouseLeave event handler callback, called when user's mouse leaves the bar.\n     */\n    onMouseLeave: PropTypes.func,\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func,\n  };\n  static defaultProps = {\n    x: 0,\n    y: 0,\n    thickness: 8,\n    className: '',\n    style: {}\n  };\n\n  render() {\n    //  x/y are values in the *data* domain, not pixel domain\n    const {xScale, yScale, x, xEnd, y, yEnd, thickness, style, onMouseEnter, onMouseMove, onMouseLeave} = this.props;\n\n    invariant(hasOneOfTwo(xEnd, yEnd), `Bar expects an xEnd *or* yEnd prop, but not both.`);\n\n    const orientation = isUndefined(xEnd) ? 'vertical' : 'horizontal';\n    const className = `chart-bar chart-bar-${orientation} ${this.props.className || ''}`;\n\n    let rectX, rectY, width, height;\n    if(orientation === 'horizontal') {\n      rectY = yScale(y) - (thickness / 2);\n      const x0 = xScale(x);\n      const x1 = xScale(xEnd);\n      rectX = Math.min(x0, x1);\n      width = Math.abs(x1 - x0);\n      height = thickness;\n\n    } else { // vertical\n      rectX = xScale(x) - (thickness / 2);\n      const y0 = yScale(y);\n      const y1 = yScale(yEnd);\n      rectY = Math.min(y0, y1);\n      height = Math.abs(y1 - y0);\n      width = thickness;\n    }\n\n    return <rect {...{\n      x: rectX, y: rectY,\n      width, height, className, style,\n      onMouseEnter, onMouseMove, onMouseLeave\n    }} />\n  }\n}\n"]}