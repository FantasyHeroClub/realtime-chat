{"version":3,"sources":["../src/XYPlot.js"],"names":["indexOfClosestNumberInList","number","list","reduce","closestI","current","i","Math","abs","invertPointScale","scale","rangeValue","rangePoints","domain","map","domainValue","nearestPointIndex","getMouseOptions","event","height","width","margin","chartBB","currentTarget","getBoundingClientRect","outerX","round","clientX","left","outerY","clientY","top","innerX","innerY","chartSize","scaleType","x","y","xValue","inRange","invert","yValue","XYPlot","onXYMouseEvent","callbackKey","callback","props","isFunction","options","onMouseMove","partial","onMouseDown","onMouseUp","onClick","onMouseEnter","onMouseLeave","spacing","panelSize","handlerNames","handlers","fromPairs","n","propsToPass","omit","className","Children","children","isNull","child","isUndefined","cloneElement","Component","propTypes","object","padding","nice","invertScale","func","defaultProps","xyKeys","dirKeys","XYPlotResolved","flow"],"mappings":"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","file":"XYPlot.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport resolveObjectProps from './utils/resolveObjectProps';\nimport resolveXYScales from './utils/resolveXYScales';\nimport {innerSize} from './utils/Margin';\nimport {inferScaleType} from './utils/Scale';\nimport {methodIfFuncProp} from './util';\n\nfunction indexOfClosestNumberInList(number, list) {\n  return list.reduce((closestI, current, i) => {\n    return Math.abs(current - number) < Math.abs(list[closestI] - number) ? i : closestI;\n  }, 0);\n}\n\nfunction invertPointScale(scale, rangeValue) {\n  // shim until d3.scalePoint.invert() is implemented for real\n  // given a value from the output range, returns the *nearest* corresponding value in the input domain\n  const rangePoints = scale.domain().map(domainValue => scale(domainValue));\n  const nearestPointIndex = indexOfClosestNumberInList(rangeValue, rangePoints);\n  return scale.domain()[nearestPointIndex];\n}\n\nfunction getMouseOptions(event, {scale, height, width, margin}) {\n  const chartBB = event.currentTarget.getBoundingClientRect();\n  const outerX = Math.round(event.clientX - chartBB.left);\n  const outerY = Math.round(event.clientY - chartBB.top);\n  const innerX = (outerX - (margin.left || 0));\n  const innerY = (outerY -(margin.top || 0));\n  const chartSize = innerSize({width, height}, margin);\n  const scaleType = {x: inferScaleType(scale.x), y: inferScaleType(scale.y)};\n\n  const xValue = (!_.inRange(innerX, 0, chartSize.width /* + padding.left + padding.right */)) ? null :\n    (scaleType.x === 'ordinal') ?\n      invertPointScale(scale.x, innerX) :\n      scale.x.invert(innerX);\n  const yValue = (!_.inRange(innerY, 0, chartSize.height /* + padding.top + padding.bottom */)) ? null :\n    (scaleType.y === 'ordinal') ?\n      invertPointScale(scale.y, innerY) :\n      scale.y.invert(innerY);\n\n  return {event, outerX, outerY, innerX, innerY, xValue, yValue, scale, margin};\n}\n\nclass XYPlot extends React.Component {\n  static propTypes = {\n    width: PropTypes.number,\n    height: PropTypes.number,\n    scale: PropTypes.object,\n    scaleType: PropTypes.object,\n    domain: PropTypes.object,\n    margin: PropTypes.object,\n    spacing: PropTypes.object,\n    // todo spacing & padding...\n    padding: PropTypes.object,\n    nice: PropTypes.object,\n    invertScale: PropTypes.object,\n\n    onMouseMove: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onMouseDown: PropTypes.func,\n    onMouseUp: PropTypes.func\n  };\n\n  static defaultProps = {\n    width: 400,\n    height: 250,\n    // nice: {x: true, y: true},\n    invertScale: {x: false, y: false},\n    // emptyLabel: \"Unknown\",\n\n    // these values are inferred from data if not provided, therefore empty defaults\n    // scaleType: {},\n    // domain: {},\n    // margin: {},\n    //spacing: {top: 0, bottom: 0, left: 0, right: 0}\n  };\n\n  onXYMouseEvent = (callbackKey, event) => {\n    const callback = this.props[callbackKey];\n    if(!_.isFunction(callback)) return;\n    const options = getMouseOptions(event, this.props);\n    callback(options);\n  };\n  onMouseMove = _.partial(this.onXYMouseEvent, 'onMouseMove');\n  onMouseDown = _.partial(this.onXYMouseEvent, 'onMouseDown');\n  onMouseUp = _.partial(this.onXYMouseEvent, 'onMouseUp');\n  onClick = _.partial(this.onXYMouseEvent, 'onClick');\n  onMouseEnter = (event) => this.props.onMouseEnter({event});\n  onMouseLeave = (event) => this.props.onMouseLeave({event});\n\n  render() {\n    const {width, height, margin, spacing} = this.props;\n    // subtract margin + spacing from width/height to obtain inner width/height of panel & chart area\n    // panelSize is the area including chart + spacing but NOT margin\n    // chartSize is smaller, chart *only*, not including margin or spacing\n    const panelSize = innerSize({width, height}, margin);\n    const chartSize = innerSize(panelSize, spacing);\n\n    const handlerNames = ['onMouseMove', 'onMouseEnter', 'onMouseLeave', 'onMouseDown', 'onMouseUp', 'onClick'];\n    const handlers = _.fromPairs(handlerNames.map(n => [n, methodIfFuncProp(n, this.props, this)]));\n\n    const propsToPass = {\n      ..._.omit(this.props, ['children']),\n      ...chartSize\n    };\n\n    return <svg {...{width, height, className: 'xy-plot', onMouseMove: this.onMouseMove}} {...handlers}>\n      <rect className=\"chart-background\" {...{width, height}} />\n      <g transform={`translate(${margin.left + spacing.left}, ${margin.top + spacing.top})`} className=\"chart-inner\">\n        <rect transform={`translate(${-spacing.left}, ${-spacing.top})`} className=\"plot-background\" {...panelSize} />\n        {React.Children.map(this.props.children, child => {\n          return (_.isNull(child) || _.isUndefined(child)) ? null :\n            React.cloneElement(child, propsToPass);\n        })}\n      </g>\n    </svg>\n  }\n}\n\nconst xyKeys = ['scaleType', 'domain', 'invertScale'];\nconst dirKeys = ['margin', 'padding', 'spacing'];\n\nconst XYPlotResolved = _.flow([\n  resolveXYScales,\n  _.partial(resolveObjectProps, _, xyKeys, ['x', 'y']),\n  _.partial(resolveObjectProps, _, dirKeys, ['top', 'bottom', 'left', 'right'])\n])(XYPlot);\n\nexport default XYPlotResolved;\n"]}