{"version":3,"sources":["../src/XYPlot.js"],"names":["indexOfClosestNumberInList","number","list","reduce","closestI","current","i","Math","abs","invertPointScale","scale","rangeValue","rangePoints","domain","map","domainValue","nearestPointIndex","getMouseOptions","event","xScale","yScale","height","width","marginTop","marginBottom","marginLeft","marginRight","chartBB","currentTarget","getBoundingClientRect","outerX","round","clientX","left","outerY","clientY","top","innerX","innerY","chartSize","bottom","right","xScaleType","yScaleType","xValue","inRange","invert","yValue","XYPlot","onXYMouseEvent","callbackKey","callback","props","isFunction","options","onMouseMove","partial","onMouseDown","onMouseUp","onClick","onMouseEnter","onMouseLeave","spacingTop","spacingBottom","spacingLeft","spacingRight","panelSize","handlerNames","handlers","fromPairs","n","propsToPass","omit","className","Children","children","isNull","child","isUndefined","cloneElement","Component","propTypes","xDomain","array","yDomain","func","string","margin","object","paddingTop","paddingBottom","paddingLeft","paddingRight","invertXScale","bool","invertYScale","defaultProps","XYPlotResolved"],"mappings":"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","file":"XYPlot.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport resolveXYScales from './utils/resolveXYScales';\nimport {innerSize} from './utils/Margin';\nimport {inferScaleType} from './utils/Scale';\nimport {methodIfFuncProp} from './util';\n\nfunction indexOfClosestNumberInList(number, list) {\n  return list.reduce((closestI, current, i) => {\n    return Math.abs(current - number) < Math.abs(list[closestI] - number) ? i : closestI;\n  }, 0);\n}\n\nfunction invertPointScale(scale, rangeValue) {\n  // shim until d3.scalePoint.invert() is implemented for real\n  // given a value from the output range, returns the *nearest* corresponding value in the input domain\n  const rangePoints = scale.domain().map(domainValue => scale(domainValue));\n  const nearestPointIndex = indexOfClosestNumberInList(rangeValue, rangePoints);\n  return scale.domain()[nearestPointIndex];\n}\n\nfunction getMouseOptions(event, {xScale, yScale, height, width, marginTop, marginBottom, marginLeft, marginRight}) {\n  const chartBB = event.currentTarget.getBoundingClientRect();\n  const outerX = Math.round(event.clientX - chartBB.left);\n  const outerY = Math.round(event.clientY - chartBB.top);\n  const innerX = (outerX - (marginLeft || 0));\n  const innerY = (outerY -(marginTop || 0));\n  const chartSize = innerSize({width, height}, {top: marginTop, bottom: marginBottom, left: marginLeft, right: marginRight});\n  const xScaleType = inferScaleType(xScale);\n  const yScaleType = inferScaleType(yScale);\n\n  const xValue = (!_.inRange(innerX, 0, chartSize.width /* + padding.left + padding.right */)) ? null :\n    (xScaleType === 'ordinal') ?\n      invertPointScale(xScale, innerX) :\n      xScale.invert(innerX);\n  const yValue = (!_.inRange(innerY, 0, chartSize.height /* + padding.top + padding.bottom */)) ? null :\n    (yScaleType === 'ordinal') ?\n      invertPointScale(yScale, innerY) :\n      yScale.invert(innerY);\n\n  return {event, outerX, outerY, innerX, innerY, xValue, yValue, xScale, yScale, marginTop, marginBottom, marginLeft, marginRight};\n}\n\nclass XYPlot extends React.Component {\n  static propTypes = {\n    /**\n     * (outer) width of the chart (SVG element).\n     */\n    width: PropTypes.number,\n    /**\n     * (outer) width of the chart (SVG element).\n     */\n    height: PropTypes.number,\n    /**\n     * The X and/or Y domains of the data in {x: [...], y: [...]} format.\n     * For numerical scales, this is represented as [min, max] of the data;\n     * for ordinal/categorical scales it is an array of known values ie. ['a', 'b', 'c'].\n     * Automatically determined from data if not passed.\n     */\n    xDomain: PropTypes.array,\n    yDomain: PropTypes.array,\n    /**\n     * d3 scales for the X and Y axes of the chart, in {x, y} object format.\n     * (optional, normally determined automatically by XYPlot)\n     */\n    xScale: PropTypes.func,\n    yScale: PropTypes.func,\n\n    xScaleType: PropTypes.string,\n    yScaleType: PropTypes.string,\n\n    /**\n     *\n     */\n    margin: PropTypes.object,\n    marginTop: PropTypes.number,\n    marginBottom: PropTypes.number,\n    marginLeft: PropTypes.number,\n    marginRight: PropTypes.number,\n\n    // todo spacing & padding...\n    spacingTop: PropTypes.number,\n    spacingBottom: PropTypes.number,\n    spacingLeft: PropTypes.number,\n    spacingRight: PropTypes.number,\n\n    paddingTop: PropTypes.number,\n    paddingBottom: PropTypes.number,\n    paddingLeft: PropTypes.number,\n    paddingRight: PropTypes.number,\n\n    invertXScale: PropTypes.bool,\n    invertYScale: PropTypes.bool,\n\n    onMouseMove: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onMouseDown: PropTypes.func,\n    onMouseUp: PropTypes.func\n  };\n\n  static defaultProps = {\n    width: 400,\n    height: 250,\n    // invertScale: {x: false, y: false},\n    invertXScale: false,\n    invertYScale: false\n    // emptyLabel: \"Unknown\",\n\n    // these values are inferred from data if not provided, therefore empty defaults\n    // scaleType: {},\n    // domain: {},\n    // margin: {},\n    //spacing: {top: 0, bottom: 0, left: 0, right: 0}\n  };\n\n  onXYMouseEvent = (callbackKey, event) => {\n    const callback = this.props[callbackKey];\n    if(!_.isFunction(callback)) return;\n    const options = getMouseOptions(event, this.props);\n    callback(options);\n  };\n  onMouseMove = _.partial(this.onXYMouseEvent, 'onMouseMove');\n  onMouseDown = _.partial(this.onXYMouseEvent, 'onMouseDown');\n  onMouseUp = _.partial(this.onXYMouseEvent, 'onMouseUp');\n  onClick = _.partial(this.onXYMouseEvent, 'onClick');\n  onMouseEnter = (event) => this.props.onMouseEnter({event});\n  onMouseLeave = (event) => this.props.onMouseLeave({event});\n\n  render() {\n    const {width, height, marginTop, marginBottom, marginLeft, marginRight, spacingTop, spacingBottom, spacingLeft, spacingRight}\n      = this.props;\n    // subtract margin + spacing from width/height to obtain inner width/height of panel & chart area\n    // panelSize is the area including chart + spacing but NOT margin\n    // chartSize is smaller, chart *only*, not including margin or spacing\n    const panelSize = innerSize({width, height}, {top: marginTop, bottom: marginBottom, left: marginLeft, right: marginRight});\n    const chartSize = innerSize(panelSize, {top: spacingTop, bottom: spacingBottom, left: spacingLeft, right: spacingRight});\n\n    const handlerNames = ['onMouseMove', 'onMouseEnter', 'onMouseLeave', 'onMouseDown', 'onMouseUp', 'onClick'];\n    const handlers = _.fromPairs(handlerNames.map(n => [n, methodIfFuncProp(n, this.props, this)]));\n\n    const propsToPass = {\n      ..._.omit(this.props, ['children']),\n      ...chartSize\n    };\n\n    return <svg {...{width, height, className: 'xy-plot'}} {...handlers}>\n      <rect className=\"chart-background\" {...{width, height}} />\n      <g transform={`translate(${marginLeft + spacingLeft}, ${marginTop + spacingTop})`} className=\"chart-inner\">\n        <rect transform={`translate(${-spacingLeft}, ${-spacingTop})`} className=\"plot-background\" {...panelSize} />\n        {React.Children.map(this.props.children, child => {\n          return (_.isNull(child) || _.isUndefined(child)) ? null :\n            React.cloneElement(child, propsToPass);\n        })}\n      </g>\n    </svg>\n  }\n}\n\nconst XYPlotResolved = resolveXYScales(XYPlot);\n\nexport default XYPlotResolved;\n"]}