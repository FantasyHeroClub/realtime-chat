{"version":3,"sources":["../src/LineChart.js"],"names":["LineChart","getHovered","x","y","closestDataIndex","state","bisectX","props","data","initBisector","nextProps","nextState","setState","getX","d","left","scale","getY","lineStyle","accessors","points","map","pathStr","pointsToPathStr","name","Component","propTypes","array","isRequired","any","object","defaultProps","i","command","join"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA;;AACA;;;;;;;;;;;;AACA;;;IAGqBA,S;;;;;;;;;;;;;;4LA0CnBC,U,GAAa,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACrB,UAAMC,mBAAmB,MAAKC,KAAL,CAAWC,OAAX,CAAmB,MAAKC,KAAL,CAAWC,IAA9B,EAAoCN,CAApC,CAAzB;AACA,aAAO,MAAKK,KAAL,CAAWC,IAAX,CAAgBJ,gBAAhB,CAAP;AACD,K;;;;;yCAlBoB;AACnB,WAAKK,YAAL,CAAkB,KAAKF,KAAvB;AACD;;;8CACyBG,S,EAAW;AACnC,WAAKD,YAAL,CAAkBC,SAAlB;AACD;;;0CAEqBA,S,EAAWC,S,EAAW;AAC1C,aAAO,CAAC,4BAAa,KAAKJ,KAAlB,EAAyBG,SAAzB,EAAoC,CAAC,WAAD,CAApC,CAAR;AACD;;;iCAEYH,K,EAAO;AAClB,WAAKK,QAAL,CAAc,EAACN,SAAS,iBAAS;AAAA,iBAAK,wBAAaC,MAAMM,IAAnB,EAAyBC,CAAzB,CAAL;AAAA,SAAT,EAA2CC,IAArD,EAAd;AACD;;;6BAOQ;AAAA,mBACsC,KAAKR,KAD3C;AAAA,UACAC,IADA,UACAA,IADA;AAAA,UACMQ,KADN,UACMA,KADN;AAAA,UACaH,IADb,UACaA,IADb;AAAA,UACmBI,IADnB,UACmBA,IADnB;AAAA,UACyBC,SADzB,UACyBA,SADzB;;AAEP,UAAMC,YAAY,EAACjB,GAAG,wBAAaW,IAAb,CAAJ,EAAwBV,GAAG,wBAAac,IAAb,CAA3B,EAAlB;AACA,UAAMG,SAAS,iBAAEC,GAAF,CAAMb,IAAN,EAAY;AAAA,eAAK,CAACQ,MAAMd,CAAN,CAAQiB,UAAUjB,CAAV,CAAYY,CAAZ,CAAR,CAAD,EAA0BE,MAAMb,CAAN,CAAQgB,UAAUhB,CAAV,CAAYW,CAAZ,CAAR,CAA1B,CAAL;AAAA,OAAZ,CAAf;AACA,UAAMQ,UAAUC,gBAAgBH,MAAhB,CAAhB;;AAEA,aAAO;AAAA;AAAA,UAAG,WAAW,KAAKb,KAAL,CAAWiB,IAAzB;AACL,gDAAM,GAAGF,OAAT,EAAkB,OAAOJ,SAAzB;AADK,OAAP;AAGD;;;;EAxDoC,gBAAMO,S;;AAAxBzB,S,CACZ0B,S,GAAY;AACjB;;;AAGAlB,QAAM,oBAAUmB,KAAV,CAAgBC,UAJL;AAKjB;;;AAGAf,QAAM,oBAAUgB,GARC;AASjB;;;AAGAZ,QAAM,oBAAUY,GAZC;AAajB;;;AAGAX,aAAW,oBAAUY,MAhBJ;AAiBjB;;;AAGAd,SAAO,oBAAUc;AApBA,C;AADA9B,S,CAuBZ+B,Y,GAAe;AACpBb,aAAW;AADS,C;kBAvBHlB,S;;;AA2DrB,SAASuB,eAAT,CAAyBH,MAAzB,EAAiC;AAC/B;AACA;AACA;AACA,SAAO,iBAAEC,GAAF,CAAMD,MAAN,EAAc,iBAASY,CAAT,EAAe;AAAA;AAAA,QAAb9B,CAAa;AAAA,QAAVC,CAAU;;AAClC,QAAM8B,UAAWD,MAAM,CAAP,GAAY,GAAZ,GAAkB,GAAlC;AACA,WAAUC,OAAV,SAAqB/B,CAArB,SAA0BC,CAA1B;AACD,GAHM,EAGJ+B,IAHI,CAGC,GAHD,CAAP;AAID","file":"LineChart.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport {bisector} from 'd3';\nimport shallowEqual from './utils/shallowEqual';\nimport PropTypes from 'prop-types';\n\nimport {makeAccessor} from './utils/Data';\nimport xyPropsEqual from './utils/xyPropsEqual';\n// import {xyPropsEqualDebug as xyPropsEqual} from './utils/xyPropsEqual';\n\n\nexport default class LineChart extends React.Component {\n  static propTypes = {\n    /**\n     * the array of data objects\n     */\n    data: PropTypes.array.isRequired,\n    /**\n     * data getter for line X coordinates\n     */\n    getX: PropTypes.any,\n    /**\n     * data getter for line Y coordinates\n     */\n    getY: PropTypes.any,\n    /**\n     * inline style object to be applied to the line path\n     */\n    lineStyle: PropTypes.object,\n    /**\n     * d3 scale - provided by XYPlot\n     */\n    scale: PropTypes.object\n  };\n  static defaultProps = {\n    lineStyle: {}\n  };\n\n  componentWillMount() {\n    this.initBisector(this.props);\n  }\n  componentWillReceiveProps(nextProps) {\n    this.initBisector(nextProps);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !xyPropsEqual(this.props, nextProps, ['lineStyle']);\n  }\n\n  initBisector(props) {\n    this.setState({bisectX: bisector(d => makeAccessor(props.getX)(d)).left});\n  }\n\n  getHovered = (x, y) => {\n    const closestDataIndex = this.state.bisectX(this.props.data, x);\n    return this.props.data[closestDataIndex];\n  };\n\n  render() {\n    const {data, scale, getX, getY, lineStyle} = this.props;\n    const accessors = {x: makeAccessor(getX), y: makeAccessor(getY)};\n    const points = _.map(data, d => [scale.x(accessors.x(d)), scale.y(accessors.y(d))]);\n    const pathStr = pointsToPathStr(points);\n\n    return <g className={this.props.name}>\n      <path d={pathStr} style={lineStyle}/>\n    </g>;\n  }\n}\n\nfunction pointsToPathStr(points) {\n  // takes array of points in [[x, y], [x, y]... ] format\n  // returns SVG path string in \"M X Y L X Y\" format\n  // https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths#Line_commands\n  return _.map(points, ([x, y], i) => {\n    const command = (i === 0) ? 'M' : 'L';\n    return `${command} ${x} ${y}`;\n  }).join(' ');\n}\n"]}