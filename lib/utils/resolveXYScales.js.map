{"version":3,"sources":["../../src/utils/resolveXYScales.js"],"names":["resolveXYScales","errs","getDomain","C","componentName","Component","displayName","isValidScaleType","scaleType","isString","areValidScales","scales","every","areValidScaleTypes","scaleTypes","mapOverChildren","children","iteratee","iterateeArgs","isFunction","Error","compact","Children","map","child","isValidElement","props","type","omitNullUndefined","obj","omitBy","isUndefined","v","isNull","ComposedComponent","_makeScales","width","height","xScaleType","yScaleType","xDomain","yDomain","xScale","yScale","marginTop","marginBottom","marginLeft","marginRight","spacingTop","spacingBottom","spacingLeft","spacingRight","spacing","top","bottom","left","right","margin","innerChartWidth","innerChartHeight","xRange","domain","range","yRange","isDone","getScaleType","componentScaleTypes","assign","isArray","data","datasets","x","y","count","childrenScaleTypes","_resolveScaleType","bind","childXScaleTypes","uniq","childScaleTypes","length","console","warn","childYScaleTypes","xDataType","yDataType","isXDone","isYDone","componentXDomain","componentYDomain","childrenDomains","_resolveDomain","childXDomains","childDomains","childYDomains","getTickDomain","componentTickDomains","childrenTickDomains","_resolveTickDomain","childrenXTickDomains","childTickDomains","xTickDomain","undefined","childrenYTickDomains","yTickDomain","isNumber","getMargin","componentMargin","childrenMargins","_resolveMargin","childrenMargin","childMargins","getSpacing","componentSpacing","childrenSpacings","_resolveSpacing","childrenSpacing","childSpacing","invertXScale","invertYScale","slice","reverse","scaleOptions","scaleX","scaleY","tempScale","tempXScale","tempYScale","defaults","passedProps","defaultProps"],"mappings":"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","file":"resolveXYScales.js","sourcesContent":["import _ from 'lodash';\nimport {scalePoint} from 'd3';\nimport React from 'react';\nimport invariant from 'invariant';\n\nimport {\n  makeAccessor,\n  makeAccessor2,\n  getValue,\n  domainFromDatasets,\n  domainFromData,\n  inferDatasetsType,\n  datasetsFromPropsOrDescendants,\n  combineDomains,\n  combineBorderObjects,\n  isValidDomain\n} from './Data';\n\nimport {\n  scaleTypeFromDataType,\n  dataTypeFromScaleType,\n  inferDataTypeFromDomain,\n  initScale,\n  isValidScale\n} from './Scale';\n\nimport {innerRangeX, innerRangeY, innerWidth, innerHeight} from './Margin';\n\n/**\n * `resolveXYScales` is a higher-order-component.\n *\n * @param {Component} Component - The React Component (class) which should be wrapped by this HOC\n * @returns {Component} - A Component which auto-resolves XY scales from given props\n*/\n\nconst errs = {\n  getDomain: (C) =>\n    `Components enhanced by resolveXYScales must have a static getDomain method, ${componentName(C)} does not have one`\n};\nfunction componentName(Component) {\n  return Component.displayName || \"Component wrapped by resolveXYScales\";\n}\n\nfunction isValidScaleType(scaleType) {\n  // todo: check against whitelist?\n  return _.isString(scaleType);\n}\nfunction areValidScales(scales) {\n  return _.every(scales, isValidScale);\n}\nfunction areValidScaleTypes(scaleTypes) {\n  return _.every(scaleTypes, isValidScaleType);\n}\n\nfunction mapOverChildren(children, iteratee, ...iterateeArgs) {\n  // loop over all children (react elements) and call iteratee (a function) on each one\n  // iteratee is called with parameters (child.props, child.type, ...iterateeArgs)\n  if(!_.isFunction(iteratee)) throw new Error('mapOverChildren iteratee must be a function');\n\n  return _.compact(React.Children.map(children, child => {\n    if(!child || !React.isValidElement(child)) return null;\n    return iteratee(child.props, child.type, ...iterateeArgs);\n  }));\n}\nfunction omitNullUndefined(obj) {\n  return _.omitBy(obj, v => _.isUndefined(v) || _.isNull(v));\n}\n\n// not currently being used but potentially has some learnings\n// function resolveXYPropsOnComponentOrChildren(propKeys, props, reducers = {}, validators = {}, result = {}) {\n//   const isDone = (o) => (_.every(propKeys, k => _.isObject(o[k]) && _.every(['x', 'y'], xy => _.has(o[k][xy]))));\n//   result = _.pick({...props, ...result}, propKeys);\n\n//   let resolved = {};\n//   _.forEach(propKeys, propKey => {\n//     _.forEach(['x', 'y'], k => {\n//       const isValid = validators[propKey] || (() => true);\n//       if(_.isObject(props[propKey]) && _.has(props[propKey], k) && isValid(props[propKey][k])) {\n//         if(!_.has(result, propKey)) result[propKey] = {};\n//         result[propKey][k] = props[propKey][k];\n//       }\n//     });\n//   });\n\n//   if(isDone(result)) return result;\n\n//   if(React.Children.count(props.children)) {\n//     let childProps = mapOverChildren(props.children, resolveXYPropsOnComponentOrChildren, propKeys, 'props', result);\n//     React.Children.forEach(props.children, child => {\n//       if(!child) return;\n//       childProps.push(resolveXYPropsOnComponentOrChildren(propKeys, child.props, result));\n//     });\n//       let childDomains = [];\n//       React.Children.forEach(props.children, child => {\n//         childDomains = childDomains.concat(this._resolveDomain(child.props, child.type, scaleType));\n//       });\n\n//       console.log('combining domains', childDomains);\n//       const childDomain =  _.fromPairs(['x', 'y'].map(k => {\n//         console.log(_.compact(_.map(childDomains, k)), scaleType[k]);\n//         const kDomain = combineDomains(_.compact(_.map(childDomains, k)), dataTypeFromScaleType(scaleType[k]));\n//         console.log(kDomain);\n//         return [k, kDomain];\n//       }));\n//       console.log('combined domains', childDomain);\n\n//       domain = _.assign(childDomain, domain);\n//       return domain;\n//   }\n\n//   propKeys.forEach(k => {\n//     result[propKeys] = props\n//   })\n// }\n\n\n\nexport default function resolveXYScales(ComposedComponent) {\n  return class extends React.Component {\n    static defaultProps = _.defaults(ComposedComponent.defaultProps, {\n      invertXScale: false,\n      invertYScale: false\n    });\n\n    // todo better way for HOC's to pass statics through?\n    static getScaleType = ComposedComponent.getScaleType; \n    static getSpacing = ComposedComponent.getSpacing;\n    static getDomain = ComposedComponent.getDomain;\n    static getMargin = ComposedComponent.getMargin;\n\n    _resolveScaleType(props, Component) {\n      let {xScaleType, yScaleType} = props;\n\n      const isDone = () => areValidScaleTypes([xScaleType, yScaleType]);\n\n      // short-circuit if both scale types provided\n      if(isDone()) return {xScaleType, yScaleType};\n\n      // if Component provides a custom static getScaleType method\n      // use it to determine remaining scale types\n      if(_.isFunction(Component.getScaleType)) {\n        const componentScaleTypes = omitNullUndefined(Component.getScaleType(props));\n        ({xScaleType, yScaleType} = _.assign(componentScaleTypes, omitNullUndefined({xScaleType, yScaleType})));\n        if(isDone()) return {xScaleType, yScaleType};\n      }\n\n      // if component has domain props,\n      // infer the data type, & use that to get scale type\n      if(!isValidScaleType(xScaleType) && isValidDomain(props.xDomain)) {\n        xScaleType = scaleTypeFromDataType(inferDataTypeFromDomain(props.xDomain));\n      }\n      if(!isValidScaleType(yScaleType) && isValidDomain(props.yDomain)) {\n        yScaleType = scaleTypeFromDataType(inferDataTypeFromDomain(props.yDomain));\n      }\n      if(isDone()) return {xScaleType, yScaleType};\n\n      // if Component has data or datasets props,\n      // infer the data type, & use that to get scale type\n      if(_.isArray(props.data) || _.isArray(props.datasets)) {\n        const datasets = _.isArray(props.datasets) ? props.datasets : [props.data];\n\n        if(!isValidScaleType(xScaleType)) {\n          xScaleType = scaleTypeFromDataType(inferDatasetsType(datasets, makeAccessor2(props.x)));\n        }\n        if(!isValidScaleType(yScaleType)) {\n          yScaleType = scaleTypeFromDataType(inferDatasetsType(datasets, makeAccessor2(props.y)));\n        }\n        if(isDone()) return {xScaleType, yScaleType};\n      }\n\n      // if Component has children,\n      // recurse through descendants to resolve their scale types the same way\n      if(React.Children.count(props.children)) {\n        let childrenScaleTypes = mapOverChildren(props.children, this._resolveScaleType.bind(this));\n\n        if(!isValidScaleType(xScaleType)) {\n          const childXScaleTypes = _.compact(_.uniq(childrenScaleTypes.map(childScaleTypes => childScaleTypes.xScaleType)));\n          if(!childXScaleTypes.length === 1) console.warn(\"Multiple children with different X scale types found - defaulting to 'ordinal'\");\n          xScaleType = (childXScaleTypes.length === 1) ? childXScaleTypes[0] : \"ordinal\";\n        }\n        if(!isValidScaleType(yScaleType)) {\n          const childYScaleTypes = _.compact(_.uniq(childrenScaleTypes.map(childScaleTypes => childScaleTypes.yScaleType)));\n          if(!childYScaleTypes.length === 1) console.warn(\"Multiple children with different Y scale types found - defaulting to 'ordinal'\");\n          yScaleType = (childYScaleTypes.length === 1) ? childYScaleTypes[0] : \"ordinal\";\n        }\n      }\n\n      if(!isDone()) console.warn(`resolveXYScales was unable to resolve both scale types. xScaleType: ${xScaleType}, yScaleType: ${yScaleType}`);\n\n      return {xScaleType, yScaleType};\n    }\n\n    _resolveDomain(props, Component, xScaleType, yScaleType) {\n      let {xDomain, yDomain} = props;\n      const xDataType = dataTypeFromScaleType(xScaleType);\n      const yDataType = dataTypeFromScaleType(yScaleType);\n\n      const isXDone = () => isValidDomain(xDomain, xDataType);\n      const isYDone = () => isValidDomain(yDomain, yDataType);\n      const isDone = () => isXDone() && isYDone();\n\n      // short-circuit if all domains provided\n      if(isDone()) return {xDomain, yDomain};\n\n      // if Component provides a custom static getScaleType method\n      // use it to determine remaining scale types\n      if(_.isFunction(Component.getDomain)) {\n        const {xDomain: componentXDomain, yDomain: componentYDomain} = Component.getDomain({...props, xScaleType, yScaleType});\n\n        if(!isXDone() && componentXDomain && !isValidDomain(componentXDomain, xDataType))\n          console.warn(`Component.getDomain returned an invalid domain for data type '${xDataType}': ${componentXDomain} - ignoring`);\n        if(!isXDone() && isValidDomain(componentXDomain, xDataType)) xDomain = componentXDomain;\n\n        if(!isYDone() && componentYDomain && !isValidDomain(componentYDomain, yDataType))\n          console.warn(`Component.getDomain returned an invalid domain for data type '${yDataType}': ${componentYDomain} - ignoring`);\n        if(!isYDone() && isValidDomain(componentYDomain, yDataType)) yDomain = componentYDomain;\n\n        if(isDone()) return {xDomain, yDomain};\n      }\n\n      // if Component has data or datasets props,\n      // use the default domainFromDatasets function to determine a domain from them\n      if(_.isArray(props.data) || _.isArray(props.datasets)) {\n        const datasets = _.isArray(props.datasets) ? props.datasets : [props.data];\n        if(!isXDone()) {\n          xDomain = domainFromDatasets(datasets, makeAccessor2(props.x), xDataType);\n        }\n        if(!isYDone()) {\n          yDomain = domainFromDatasets(datasets, makeAccessor2(props.y), yDataType);\n        }\n        if(isDone()) return {xDomain, yDomain};\n      }\n\n      // if Component has children,\n      // recurse through descendants to resolve their domains the same way,\n      // and combine them into a single domain, if there are multiple\n      if(React.Children.count(props.children)) {\n        let childrenDomains = mapOverChildren(props.children, this._resolveDomain.bind(this), xScaleType, yScaleType);\n\n        if(!isXDone()) {\n          const childXDomains = _.compact(childrenDomains.map(childDomains => childDomains.xDomain));\n          xDomain = combineDomains(childXDomains, xDataType);\n        }\n        if(!isYDone()) {\n          const childYDomains = _.compact(childrenDomains.map(childDomains => childDomains.yDomain));\n          yDomain = combineDomains(childYDomains, yDataType);\n        }\n      }\n\n      if(!isDone()) console.warn(`resolveXYScales was unable to resolve both domains. xDomain: ${xDomain}, yDomain: ${yDomain}`);\n\n      return {xDomain, yDomain};\n    }\n\n    _resolveTickDomain(props, Component, {xScaleType, yScaleType, xDomain, yDomain, xScale, yScale}) {\n      // todo resolve directly from ticks/tickCount props?\n      if(_.isFunction(Component.getTickDomain)) {\n        const componentTickDomains = Component.getTickDomain({xScaleType, yScaleType, xDomain, yDomain, xScale, yScale, ...props});\n        return omitNullUndefined(componentTickDomains);\n      }\n\n      if(React.Children.count(props.children)) {\n        let childrenTickDomains =\n          mapOverChildren(props.children, this._resolveTickDomain.bind(this), {xScaleType, yScaleType, xDomain, yDomain, xScale, yScale});\n\n        const childrenXTickDomains = _.compact(childrenTickDomains.map(childTickDomains => childTickDomains.xTickDomain));\n        const xTickDomain = childrenXTickDomains.length ?\n          combineDomains(childrenXTickDomains, dataTypeFromScaleType(xScaleType)) : undefined;\n\n        const childrenYTickDomains = _.compact(childrenTickDomains.map(childTickDomains => childTickDomains.yTickDomain));\n        const yTickDomain = childrenYTickDomains.length ?\n          combineDomains(childrenYTickDomains, dataTypeFromScaleType(yScaleType)) : undefined;\n\n        return omitNullUndefined({xTickDomain, yTickDomain});\n      }\n\n      return {};\n    }\n\n    _resolveMargin(props, Component, {xScaleType, yScaleType, xDomain, yDomain, xScale, yScale}) {\n      let {marginTop, marginBottom, marginLeft, marginRight} = props;\n\n      const isDone = () => _.every([marginTop, marginBottom, marginLeft, marginRight], _.isNumber);\n\n      // short-circuit if all margins provided\n      if(isDone()) return {marginTop, marginBottom, marginLeft, marginRight};\n\n\n      // if Component provides a custom static getMargin method\n      // use it to determine remaining domains\n      if(_.isFunction(Component.getMargin)) {\n        const componentMargin = omitNullUndefined(Component.getMargin({...props, xScaleType, yScaleType, xDomain, yDomain, xScale, yScale}));\n        ({marginTop, marginBottom, marginLeft, marginRight} =\n          _.assign(componentMargin, omitNullUndefined({marginTop, marginBottom, marginLeft, marginRight})));\n        if(isDone()) return {marginTop, marginBottom, marginLeft, marginRight};\n      }\n\n      // if Component has children,\n      // recurse through descendants to resolve their margins the same way,\n      // and combine them into a single margin, if there are multiple\n      if(React.Children.count(props.children)) {\n        let childrenMargins = mapOverChildren(props.children, this._resolveMargin.bind(this), {xScaleType, yScaleType, xDomain, yDomain, xScale, yScale});\n\n        // console.log('combining child margins', childMargins);\n        const childrenMargin = combineBorderObjects(childrenMargins.map(\n          childMargins => ({top: childMargins.marginTop, bottom: childMargins.marginBottom, left: childMargins.marginLeft, right: childMargins.marginRight})\n        ));\n\n        marginTop = _.isUndefined(marginTop) ? childrenMargin.top : marginTop;\n        marginBottom = _.isUndefined(marginBottom) ? childrenMargin.bottom : marginBottom;\n        marginLeft = _.isUndefined(marginLeft) ? childrenMargin.left : marginLeft;\n        marginRight = _.isUndefined(marginRight) ? childrenMargin.right : marginRight;\n      }\n\n      return {marginTop, marginBottom, marginLeft, marginRight};\n    }\n\n    _resolveSpacing(props, Component, {xScaleType, yScaleType, xDomain, yDomain, xScale, yScale}) {\n      let {spacingTop, spacingBottom, spacingLeft, spacingRight} = props;\n\n      const isDone = () => _.every([spacingTop, spacingBottom, spacingLeft, spacingRight], _.isNumber);\n\n      // short-circuit if all spacing provided\n      if(isDone()) return {spacingTop, spacingBottom, spacingLeft, spacingRight};\n\n      // if Component provides a custom static getSpacing method\n      // use it to determine remaining domains\n      if(_.isFunction(Component.getSpacing)) {\n        const componentSpacing = omitNullUndefined(Component.getSpacing({...props, xScaleType, yScaleType, xDomain, yDomain, xScale, yScale}));\n        ({spacingTop, spacingBottom, spacingLeft, spacingRight} =\n          _.assign(componentSpacing, omitNullUndefined({spacingTop, spacingBottom, spacingLeft, spacingRight})));\n        if(isDone()) return {spacingTop, spacingBottom, spacingLeft, spacingRight};\n      }\n\n      // if Component has children,\n      // recurse through descendants to resolve their spacings the same way,\n      // and combine them into a single spacing, if there are multiple\n      if(React.Children.count(props.children)) {\n        let childrenSpacings = mapOverChildren(props.children, this._resolveSpacing.bind(this), {xScaleType, yScaleType, xDomain, yDomain, xScale, yScale});\n\n        const childrenSpacing = combineBorderObjects(childrenSpacings.map(\n          childSpacing => ({top: childSpacing.spacingTop, bottom: childSpacing.spacingBottom, left: childSpacing.spacingLeft, right: childSpacing.spacingRight})\n        ));\n\n        spacingTop = _.isUndefined(spacingTop) ? childrenSpacing.top : spacingTop;\n        spacingBottom = _.isUndefined(spacingBottom) ? childrenSpacing.bottom : spacingBottom;\n        spacingLeft = _.isUndefined(spacingLeft) ? childrenSpacing.left : spacingLeft;\n        spacingRight = _.isUndefined(spacingRight) ? childrenSpacing.right : spacingRight;\n      }\n\n      if(isDone()) return {spacingTop, spacingBottom, spacingLeft, spacingRight};\n    }\n\n    _makeScales = ({width, height, xScaleType, yScaleType, xDomain, yDomain, xScale, yScale,\n                      marginTop, marginBottom, marginLeft, marginRight, spacingTop, spacingBottom, spacingLeft, spacingRight}) => {\n      const spacing = {top: spacingTop, bottom: spacingBottom, left: spacingLeft, right: spacingRight};\n      const margin = {top: marginTop, bottom: marginBottom, left: marginLeft, right: marginRight};\n      const innerChartWidth = innerWidth(width, margin);\n      const innerChartHeight = innerHeight(height, margin);\n\n      // use existing scales if provided, otherwise create new\n      if(!isValidScale(xScale)) {\n        //innerRange functions produce range (i.e. [5,20]) and map function normalizes to 0 (i.e. [0,15])\n        const xRange = innerRangeX(innerChartWidth, spacing).map(v => v - (spacing.left || 0));\n        xScale = initScale(xScaleType).domain(xDomain).range(xRange);\n      }\n      if(!isValidScale(yScale)) {\n        const yRange = innerRangeY(innerChartHeight, spacing).map(v => v - (spacing.top || 0));\n        yScale = initScale(yScaleType).domain(yDomain).range(yRange);\n      }\n\n      // todo - ticks, nice and getDomain should be an axis prop instead, and axis should have getDomain\n\n      // set `nice` option to round scale domains to nicer numbers\n      // const kTickCount = tickCount ? tickCount[k] : 10;\n      // if(nice && nice[k] && _.isFunction(kScale.nice)) kScale.nice(kTickCount);\n\n      // extend scale domain to include custom `ticks` if passed\n      //\n      // if(ticks[k]) {\n      //   const dataType = dataTypeFromScaleType(scaleType[k]);\n      //   const tickDomain = domainFromData(ticks[k], _.identity, dataType);\n      //   kScale.domain(combineDomains([kScale.domain(), tickDomain]), dataType);\n      // }\n\n      // reverse scale domain if `invertScale` is passed\n      // if(invertScale[k]) kScale.domain(kScale.domain().reverse());\n\n      return {xScale, yScale};\n    };\n\n    render() {\n      const {props} = this;\n      const {width, height, invertXScale, invertYScale} = props;\n\n      // short-circuit if scales provided\n      // todo warn/throw if bad scales are passed\n      // todo also pass domain/scaleType/etc from scales??\n      if(isValidScale(props.xScale) && isValidScale(props.yScale))\n        return <ComposedComponent {...this.props} />;\n\n      // scales not provided, so we have to resolve them\n      // first resolve scale types and domains\n      // const scaleType = this._resolveScaleType(props, ComposedComponent);\n      const {xScaleType, yScaleType} = this._resolveScaleType(props, ComposedComponent);\n\n      // const domain = this._resolveDomain(props, ComposedComponent, scaleType);\n      let {xDomain, yDomain} = this._resolveDomain(props, ComposedComponent, xScaleType, yScaleType);\n      if(invertXScale) xDomain = xDomain.slice().reverse();\n      if(invertYScale) yDomain = yDomain.slice().reverse();\n\n      // create a temporary scale with size & domain, which may be used by the Component to calculate margin/tickDomain\n      // (eg. to create and measure labels for the scales)\n      // let tempScale = this._makeScales(scaleOptions);\n      let scaleOptions = {\n        width, height, xScaleType, yScaleType, xDomain, yDomain, scaleX: props.scaleX, scaleY: props.scaleY,\n        marginTop: props.marginTop, marginBottom: props.marginBottom, marginLeft: props.marginLeft, marginRight: props.marginRight,\n        spacingTop: props.spacingTop, spacingBottom: props.spacingBottom, spacingLeft: props.spacingLeft, spacingRight: props.spacingRight,\n        xScale: props.xScale, yScale: props.yScale\n      };\n      // create a temporary scale with size & domain, which may be used by the Component to calculate margin/tickDomain\n      // (eg. to create and measure labels for the scales)\n      let tempScale = this._makeScales(scaleOptions);\n      let {xScale: tempXScale, yScale: tempYScale} = tempScale;\n\n      // getTickDomain gives children the opportunity to modify the domain to include their scale ticks\n      // (can't happen in getDomain, because it can't be done until the base domain/tempScale has been created)\n      // nice-ing happens in the getTickDomain function inside of _resolveTickDomain\n      const {xTickDomain, yTickDomain} = this._resolveTickDomain(props, ComposedComponent, {xScaleType, yScaleType, xDomain, yDomain, xScale: tempXScale, yScale: tempYScale});\n      if(isValidDomain(xTickDomain, dataTypeFromScaleType(xScaleType))) {\n        xDomain = combineDomains([xDomain, xTickDomain], dataTypeFromScaleType(xScaleType));\n      }\n      if(isValidDomain(yTickDomain, dataTypeFromScaleType(yScaleType))) {\n        yDomain = combineDomains([yDomain, yTickDomain], dataTypeFromScaleType(yScaleType));\n      }\n\n      // update tempScale to use new domain before creating margins\n      scaleOptions = {...scaleOptions, xDomain, yDomain};\n      tempScale = this._makeScales(scaleOptions);\n\n\n      // then resolve the margins\n      const {marginTop, marginBottom, marginLeft, marginRight} = _.defaults(\n        this._resolveMargin(props, ComposedComponent, {xScaleType, yScaleType, xDomain, yDomain, xScale: tempScale.xScale, yScale: tempScale.yScale}),\n        {marginTop: 0, marginBottom: 0, marginLeft: 0, marginRight: 0}\n      );\n\n      const {spacingTop, spacingBottom, spacingLeft, spacingRight} = _.defaults(\n        this._resolveSpacing(props, ComposedComponent, {xScaleType, yScaleType, xDomain, yDomain, xScale: tempScale.xScale, yScale: tempScale.yScale}),\n        {spacingTop: 0, spacingBottom: 0, spacingLeft: 0, spacingRight: 0}\n      );\n\n      // create real scales from resolved margins\n      scaleOptions = {...scaleOptions, marginTop, marginBottom, marginLeft, marginRight, spacingTop, spacingBottom, spacingLeft, spacingRight};\n      const {xScale, yScale} = this._makeScales(scaleOptions);\n\n      \n      const passedProps = _.assign({}, this.props, {\n        //legacy\n        // scale: {x: xScale, y: yScale},\n        // domain: {x: xDomain, y: yDomain},\n        // scaleType: {x: xScaleType, y: yScaleType},\n        // margin: {top: marginTop, bottom: marginBottom, left: marginLeft, right: marginRight},\n        // 0.4.0\n        xScale, yScale,\n        xDomain, yDomain,\n        xScaleType, yScaleType,\n        marginTop, marginBottom, marginLeft, marginRight,\n        spacingTop, spacingBottom, spacingLeft, spacingRight,\n      });\n      return <ComposedComponent {...passedProps} />;\n\n      // todo spacing/padding\n      // todo includeZero\n      // todo purerender/shouldcomponentupdate?\n      // todo resolve margins if scales are present\n      // todo throw if cannot resolve scaleType\n      // todo throw if cannot resolve domain\n      // todo check to make sure margins didn't change after scales resolved?\n    }\n  }\n}\n"]}