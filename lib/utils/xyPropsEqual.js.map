{"version":3,"sources":["../../src/utils/xyPropsEqual.js"],"names":["xyPropsEqual","xyPropsEqualDebug","defaultPropKeysToDeepCheck","propsA","propsB","propKeysToDeepCheck","propKeysToSkipShallowCheck","concat","isEqual","omit","every","key","get","deeperProps","isDeepEqual","console","log","isScaleEqual","scale"],"mappings":";;;;;;kBAiBwBA,Y;QAgBRC,iB,GAAAA,iB;;AAjChB;;;;AACA;;;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACO,IAAMC,kEAA6B,CACxC,QADwC,EAC9B,WAD8B,EACjB,SADiB,EACN,QADM,EACI,OADJ,EACa,WADb,EAC0B,MAD1B,CAAnC;;AAIQ,SAASF,YAAT,CAAsBG,MAAtB,EAA8BC,MAA9B,EAAwF;AAAA,MAAlDC,mBAAkD,uEAA5BH,0BAA4B;;AACrG,MAAMI,6BAA6BD,oBAAoBE,MAApB,CAA2B,OAA3B,CAAnC;;AAEA,MAAMC;AACJ;AACA,8BAAa,iBAAEC,IAAF,CAAON,MAAP,EAAeG,0BAAf,CAAb,EAAyD,iBAAEG,IAAF,CAAOL,MAAP,EAAeE,0BAAf,CAAzD;AACA;AACA,mBAAEI,KAAF,CAAQL,mBAAR,EAA6B,UAACM,GAAD;AAAA,WAAS,iBAAEH,OAAF,CAAUL,OAAOQ,GAAP,CAAV,EAAuBP,OAAOO,GAAP,CAAvB,CAAT;AAAA,GAA7B,CAFA;AAGA;AACA,mBAAED,KAAF,CAAQ,CAAC,GAAD,EAAM,GAAN,CAAR,EAAoB,UAACC,GAAD,EAAS;AAC3B,WAAO,uBAAW,iBAAEC,GAAF,CAAMT,MAAN,aAAuBQ,GAAvB,OAAX,EAA2C,iBAAEC,GAAF,CAAMT,MAAN,aAAuBQ,GAAvB,OAA3C,CAAP;AACD,GAFD,CANF;;AAUA,SAAOH,OAAP;AACD;;AAEM,SAASP,iBAAT,CAA2BE,MAA3B,EAAmCC,MAAnC,EAA6F;AAAA,MAAlDC,mBAAkD,uEAA5BH,0BAA4B;;AAClG;AACA;AACA,MAAMI,6BAA6BD,oBAAoBE,MAApB,CAA2B,OAA3B,CAAnC;;AAEA,MAAMC;AACJ;AACA,8BAAa,iBAAEC,IAAF,CAAON,MAAP,EAAeG,0BAAf,CAAb,EAAyD,iBAAEG,IAAF,CAAOL,MAAP,EAAeE,0BAAf,CAAzD,KACA,iBAAEI,KAAF,CAAQG,WAAR,EAAqB,UAACF,GAAD,EAAS;AAC5B,QAAMG,cAAc,iBAAEN,OAAF,CAAUL,OAAOQ,GAAP,CAAV,EAAuBP,OAAOO,GAAP,CAAvB,CAApB;AACA,QAAG,CAACG,WAAJ,EAAiBC,QAAQC,GAAR,eAAwBL,GAAxB;AACjB,WAAOG,WAAP;AACD,GAJD,CADA,IAMA,iBAAEJ,KAAF,CAAQ,CAAC,GAAD,EAAM,GAAN,CAAR,EAAoB,UAACC,GAAD,EAAS;AAC3B,QAAMM,eAAe,uBAAWd,OAAOe,KAAP,CAAaP,GAAb,CAAX,EAA8BP,OAAOc,KAAP,CAAaP,GAAb,CAA9B,CAArB;AACA,QAAG,CAACM,YAAJ,EAAkBF,QAAQC,GAAR,qBAA8BL,GAA9B;AAClB,WAAOM,YAAP;AACD,GAJD,CARF;;AAcA;AACA;AACA,SAAOT,OAAP;AACD","file":"xyPropsEqual.js","sourcesContent":["import _ from 'lodash';\nimport shallowEqual from './shallowEqual';\nimport {scaleEqual} from './Scale';\n\n// xyPropsEqual is a function used by XYPlot-type charts,\n// in their `shouldComponentUpdate` methods, for determining whether next props are the same as previous props.\n// in a perfect world this would just be a simple shallow equality check,\n// however some props are almost always passed as object/array literals (so they never ===)\n// or require special equality checks (eg. d3 scales)\n\n// default list of props to check for *deep equality* using _.isEqual\n// can be overridden by components by passing `propKeysToDeepCheck` argument\n// todo: decide whether data really belongs on this list? deep-checking data can be slow, but re-rendering is even slower\nexport const defaultPropKeysToDeepCheck = [\n  'margin', 'scaleType', 'spacing', 'domain', 'style', 'lineStyle', 'data'\n];\n\nexport default function xyPropsEqual(propsA, propsB, propKeysToDeepCheck = defaultPropKeysToDeepCheck) {\n  const propKeysToSkipShallowCheck = propKeysToDeepCheck.concat('scale');\n\n  const isEqual =\n    // most keys just get shallow-equality checked\n    shallowEqual(_.omit(propsA, propKeysToSkipShallowCheck), _.omit(propsB, propKeysToSkipShallowCheck)) &&\n    // propKeysToDeepCheck get deep-equality checked using _.isEqual\n    _.every(propKeysToDeepCheck, (key) => _.isEqual(propsA[key], propsB[key])) &&\n    // d3 scales are special, get deep-checked using custom `scaleEqual` utility\n    _.every(['x', 'y'], (key) => {\n      return scaleEqual(_.get(propsA, `scale[${key}]`), _.get(propsA, `scale[${key}]`));\n    });\n\n  return isEqual;\n}\n\nexport function xyPropsEqualDebug(propsA, propsB, propKeysToDeepCheck = defaultPropKeysToDeepCheck) {\n  // debug version of xyPropsEqual which console.logs, for figuring out which props are failing equality check\n  // const start = performance.now();\n  const propKeysToSkipShallowCheck = propKeysToDeepCheck.concat('scale');\n\n  const isEqual =\n    // most keys just get shallow-equality checked\n    shallowEqual(_.omit(propsA, propKeysToSkipShallowCheck), _.omit(propsB, propKeysToSkipShallowCheck)) &&\n    _.every(deeperProps, (key) => {\n      const isDeepEqual = _.isEqual(propsA[key], propsB[key]);\n      if(!isDeepEqual) console.log(`xyProps: ${key} not equal`);\n      return isDeepEqual;\n    }) &&\n    _.every(['x', 'y'], (key) => {\n      const isScaleEqual = scaleEqual(propsA.scale[key], propsB.scale[key]);\n      if(!isScaleEqual) console.log(`xyProps: scale.${key} not equal`);\n      return isScaleEqual;\n    });\n\n  // console.log('xyProps isEqual', isEqual);\n  // console.log('took', performance.now() - start);\n  return isEqual;\n}\n"]}