{"version":3,"sources":["../../src/utils/Scale.js"],"names":["scaleTypeFromDataType","dataTypeFromScaleType","inferDataTypeFromDomain","inferScaleType","initScale","isValidScale","hasXYScales","getScaleTicks","getTickDomain","scaleEqual","dataType","get","number","time","categorical","scaleType","linear","log","pow","ordinal","domain","isArray","Error","length","every","isNumber","isDate","scale","ticks","base","exponent","isFunction","range","isObject","x","y","tickCount","nice","identity","scaleA","scaleB","isEqual"],"mappings":"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","file":"Scale.js","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport {scaleLinear, scaleTime, scalePoint, scaleLog, scalePow} from 'd3';\n\nimport {combineDomains, domainFromData} from './Data';\n\nexport function scaleTypeFromDataType(dataType) {\n  return _.get({\n    number: 'linear',\n    time: 'time',\n    categorical: 'ordinal'\n  }, dataType, 'ordinal');\n}\n\nexport function dataTypeFromScaleType(scaleType) {\n  return _.get({\n    linear: 'number',\n    log: 'number',\n    pow: 'number',\n    time: 'time',\n    ordinal: 'categorical'\n  }, scaleType, 'categorical');\n}\n\nexport function inferDataTypeFromDomain(domain) {\n  if(!_.isArray(domain))\n    throw new Error('invalid domain, inferDataTypeFromDomain cannot infer data type');\n\n  return (domain.length !== 2) ? 'categorical':\n    (_.every(domain, _.isNumber)) ? 'number':\n    (_.every(domain, _.isDate)) ? 'time':\n    'categorical';\n}\n\nexport function inferScaleType(scale) {\n  return !(scale.ticks) ? 'ordinal' :\n    _.isDate(scale.domain()[0]) ? 'time' :\n    (scale.base) ? 'log' :\n    (scale.exponent) ? 'pow' :\n    'linear';\n}\n\nexport function initScale(scaleType) {\n  switch(scaleType) {\n    case 'linear': return scaleLinear();\n    case 'time': return scaleTime();\n    case 'ordinal': return scalePoint();\n    case 'log': return scaleLog();\n    case 'pow': return scalePow();\n  }\n}\n\nexport function isValidScale(scale) {\n  return _.isFunction(scale) && _.isFunction(scale.domain) && _.isFunction(scale.range);\n}\n\nexport function hasXYScales(scale) {\n  return _.isObject(scale) && isValidScale(scale.x) && isValidScale(scale.y);\n}\n\nexport function getScaleTicks(scale, scaleType, tickCount=10) {\n  scaleType = scaleType || inferScaleType(scale);\n  return (scaleType === 'ordinal') ?\n    scale.domain() :\n    scale.ticks(tickCount);\n}\n\nexport function getTickDomain(scale, {ticks, tickCount, nice} = {}) {\n  const scaleType = inferScaleType(scale);\n  // bug - d3 linearScale.copy().nice() modifies original scale, so we must create a new scale instead of copy()ing\n  // todo replace this with d3-scale from d3 v4.0\n  if(nice && scaleType !== 'ordinal') {\n    scale = initScale(scaleType).domain(scale.domain()).nice(tickCount || 10);\n  }\n\n  if(_.isArray(ticks)) {\n    return combineDomains([scale.domain(), domainFromData(ticks, _.identity, dataTypeFromScaleType(scaleType))]);\n  }\n  else if(nice && scaleType !== 'ordinal') return scale.domain();\n  // return undefined by default, if we have no options pertaining to ticks\n}\n\nexport function scaleEqual(scaleA, scaleB) {\n  return (\n    (!isValidScale(scaleA) || !isValidScale(scaleB)) ?\n      scaleA === scaleB : // safe fallback\n      ( // check scale equality\n        _.isEqual(scaleA.domain(), scaleB.domain()) &&\n        _.isEqual(scaleA.range(), scaleB.range()) &&\n        _.isEqual(getScaleTicks(scaleA), getScaleTicks(scaleB)) // todo is this necessary?\n      )\n  );\n}\n"]}