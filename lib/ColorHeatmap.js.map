{"version":3,"sources":["../src/ColorHeatmap.js"],"names":["CustomPropTypes","interpolatorFromType","type","toLowerCase","makeColorScale","domain","colors","interpolator","length","isString","range","interpolate","ColorHeatmap","props","data","scale","getValue","getX","getXEnd","getY","getYEnd","valueAccessor","colorScale","valueDomain","times","schemeCategory10","map","datum","i","color","style","fill","key","scaleType","x","y","Component","propTypes","xyObjectOf","func","isRequired","array","getter","string","defaultProps"],"mappings":"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","file":"ColorHeatmap.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport {scaleLinear, interpolateHcl, interpolateHsl, interpolateLab, interpolateRgb} from 'd3';\nimport invariant from 'invariant';\nimport PropTypes from 'prop-types';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\nimport {makeAccessor, domainFromData, domainFromRangeData} from './utils/Data';\nimport {dataTypeFromScaleType} from './utils/Scale';\nimport RangeRect from './RangeRect';\n\n\nfunction interpolatorFromType(type) {\n  switch(type.toLowerCase()) {\n    case 'hcl': return interpolateHcl;\n    case 'hsl': return interpolateHsl;\n    case 'lab': return interpolateLab;\n    case 'rgb': return interpolateRgb;\n    default: return interpolateHsl;\n  }\n}\n\nfunction makeColorScale(domain, colors, interpolator) {\n  invariant(domain.length == colors.length, 'makeColorScale: domain.length should equal colors.length');\n\n  if(_.isString(interpolator))\n    interpolator = interpolatorFromType(interpolator);\n\n  return scaleLinear()\n    .domain(domain)\n    .range(colors)\n    .interpolate(interpolator);\n}\n\nexport default class ColorHeatmap extends React.Component {\n  static propTypes = {\n    /**\n     * d3 scale passed from xyplot\n     */\n    scale: CustomPropTypes.xyObjectOf(PropTypes.func.isRequired),\n    /**\n     * data array - should be 1D array of all grid values\n     * (if you have a 2D array, _.flatten it)\n     */\n    data: PropTypes.array.isRequired,\n\n    /**\n     * data getters\n     */\n    getValue: CustomPropTypes.getter,\n    getX: CustomPropTypes.getter,\n    getXEnd: CustomPropTypes.getter,\n    getY: CustomPropTypes.getter,\n    getYEnd: CustomPropTypes.getter,\n\n    /**\n     * a custom d3 color scale may be passed...\n     */\n    colorScale: PropTypes.func,\n    /**\n     * ...or else one will be constructed from colors, colorStops and interpolator\n     */\n    colors: PropTypes.array,\n    valueDomain: PropTypes.array,\n    interpolator: PropTypes.string\n  };\n  static defaultProps = {\n    interpolator: 'lab'\n  };\n\n  static getDomain(props) {\n    const {scaleType, data, getX, getXEnd, getY, getYEnd} = props;\n    return {\n      x: domainFromRangeData(data, makeAccessor(getX), makeAccessor(getXEnd), dataTypeFromScaleType(scaleType.x)),\n      y: domainFromRangeData(data, makeAccessor(getY), makeAccessor(getYEnd), dataTypeFromScaleType(scaleType.y))\n    };\n  }\n\n  render() {\n    const {data, scale, getValue, getX, getXEnd, getY, getYEnd, interpolator} = this.props;\n    const valueAccessor = makeAccessor(getValue);\n    let colorScale;\n\n    if(this.props.colorScale) colorScale = this.props.colorScale;\n    else {\n      const valueDomain = this.props.valueDomain || domainFromData(data, valueAccessor);\n      const colors = this.props.colors || (\n        (valueDomain.length == 2) ?\n          ['#000000', '#ffffff'] :\n          _.times(valueDomain.length, scale.schemeCategory10().domain(_.range(10)))\n      );\n      colorScale = makeColorScale(valueDomain, colors, interpolator);\n    }\n\n    return <g className=\"color-heatmap-chart\">\n      {data.map((datum, i) => {\n        const color = colorScale(valueAccessor(datum));\n        const style = {fill: color};\n        const key = `heatmap-rect-${i}`;\n        return <RangeRect {...{datum, scale, getX, getXEnd, getY, getYEnd, style, key}} />\n      })}\n    </g>;\n  }\n}\n"]}