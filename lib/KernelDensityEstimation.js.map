{"version":3,"sources":["../src/KernelDensityEstimation.js"],"names":["CustomPropTypes","KernelDensityEstimation","state","kdeData","nextProps","nextState","shouldUpdate","props","initKDE","newProps","data","bandwidth","sampleCount","scale","width","kernel","epanechnikovKernel","samples","x","ticks","Math","ceil","setState","kernelDensityEstimator","name","height","plotWidth","plotHeight","d","y","Component","propTypes","array","isRequired","number","getX","getter","getY","string","object","axisType","scaleWidth","scaleHeight","defaultProps","sample","map","v","u","abs"],"mappings":"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","file":"KernelDensityEstimation.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport {mean} from 'd3';\nimport PropTypes from 'prop-types';\n\nimport * as CustomPropTypes from './utils/CustomPropTypes';\nimport xyPropsEqual from './utils/xyPropsEqual';\n\nimport LineChart from './LineChart.js';\n\nclass KernelDensityEstimation extends React.Component {\n  static propTypes = {\n    /**\n     * the array of data objects\n     */\n    data: PropTypes.array.isRequired,\n\n    /**\n     * Kernel bandwidth for kernel density estimator.\n     * High bandwidth => oversmoothing & underfitting; low bandwidth => undersmoothing & overfitting\n     */\n    bandwidth: PropTypes.number,\n    /**\n     * Number of samples to take from the KDE,\n     * ie. the resolution/smoothness of the KDE line - more samples => higher resolution, smooth line.\n     * Defaults to null, which causes it to be auto-determined based on width.\n     */\n    sampleCount: PropTypes.number,\n\n    // common props from XYPlot\n    // accessor for data values\n    getX: CustomPropTypes.getter,\n    getY: CustomPropTypes.getter,\n    name: PropTypes.string,\n    scale: PropTypes.object,\n    axisType: PropTypes.object,\n    scaleWidth: PropTypes.number,\n    scaleHeight: PropTypes.number\n  };\n  static defaultProps = {\n    bandwidth: 0.5,\n    sampleCount: null, // null = auto-determined based on width\n    name: ''\n  };\n\n  state = {\n    kdeData: null\n  };\n\n  static getDomain() {\n    // todo implement real static getDomain method\n    return {\n      x: null,\n      y: [0,200]\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, []);\n    return shouldUpdate;\n  }\n\n  componentWillMount() {\n    this.initKDE(this.props);\n  }\n  componentWillReceiveProps(newProps) {\n    this.initKDE(newProps);\n  }\n  initKDE(props) {\n    const {data, bandwidth, sampleCount, scale, width} = props;\n    const kernel = epanechnikovKernel(bandwidth);\n    const samples = scale.x.ticks(sampleCount || Math.ceil(width / 2));\n    this.setState({kdeData: kernelDensityEstimator(kernel, samples)(data)});\n  }\n\n  render() {\n    const {name, scale, width, height, plotWidth, plotHeight} = this.props;\n    const {kdeData} = this.state;\n\n    return <LineChart\n      data={kdeData}\n      getX={0}\n      getY={d => d[1] * 500}\n      {...{name, scale, width, height, plotWidth, plotHeight}}\n    />;\n  }\n}\n\nfunction kernelDensityEstimator(kernel, x) {\n  return function(sample) {\n    return x.map(function(x) {\n      return [x, mean(sample, function(v) { return kernel(x - v); })];\n    });\n  };\n}\n\nfunction epanechnikovKernel(scale) {\n  return function(u) {\n    return Math.abs(u /= scale) <= 1 ? .75 * (1 - u * u) / scale : 0;\n  };\n}\n\nexport default KernelDensityEstimation;\n"]}