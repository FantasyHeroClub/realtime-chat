{"version":3,"sources":["../src/MeasuredValueLabel.js"],"names":["MeasuredValueLabel","props","value","format","passedProps","omit","Children","count","children","style","defaults","defaultProps","labelStr","measured","assign","text","height","width","Component","propTypes","any","identity","fontFamily","fontSize","lineHeight","textAnchor"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqBA,kB;;;;;;;;;;;6BA2BV;AAAA,mBACiB,KAAKC,KADtB;AAAA,UACAC,KADA,UACAA,KADA;AAAA,UACOC,MADP,UACOA,MADP;;AAEP,UAAMC,cAAc,iBAAEC,IAAF,CAAO,KAAKJ,KAAZ,EAAmB,CAAC,OAAD,EAAU,QAAV,CAAnB,CAApB;;AAEA,aAAO;AAAA;AAAUG,mBAAV;AACJ,wBAAME,QAAN,CAAeC,KAAf,CAAqB,KAAKN,KAAL,CAAWO,QAAhC,IACC,KAAKP,KAAL,CAAWO,QADZ,GACuBL,OAAOD,KAAP;AAFnB,OAAP;AAKD;;;6BAvBeD,K,EAAO;AAAA,UACdC,KADc,GACGD,KADH,CACdC,KADc;AAAA,UACPC,MADO,GACGF,KADH,CACPE,MADO;;AAErB,UAAMM,QAAQ,iBAAEC,QAAF,CAAWT,MAAMQ,KAAjB,EAAwBT,mBAAmBW,YAAnB,CAAgCF,KAAxD,CAAd;AACA,UAAMG,WAAWT,OAAOD,KAAP,CAAjB;AACA,UAAMW,WAAW,2BAAY,iBAAEC,MAAF,CAAS,EAACC,MAAMH,QAAP,EAAT,EAA2BH,KAA3B,CAAZ,CAAjB;;AAEA,aAAO;AACLP,eAAOD,MAAMC,KADR;AAELa,cAAMF,SAASE,IAFV;AAGLC,gBAAQH,SAASG,MAAT,CAAgBd,KAHnB;AAILe,eAAOJ,SAASI,KAAT,CAAef;AAJjB,OAAP;AAMD;;;;EAzB6C,gBAAMgB,S;;AAAjClB,kB,CACZmB,S,GAAY;AACjBjB,SAAO,oBAAUkB;AADA,C;AADApB,kB,CAIZW,Y,GAAe;AACpBR,UAAQ,iBAAEkB,QADU;AAEpBZ,SAAO;AACLa,gBAAY,uBADP;AAELC,cAAU,MAFL;AAGLC,gBAAY,CAHP;AAILC,gBAAY;AAJP;AAFa,C;kBAJHzB,kB","file":"MeasuredValueLabel.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport measureText from 'measure-text';\nimport PropTypes from 'prop-types';\n\nexport default class MeasuredValueLabel extends React.Component {\n  static propTypes = {\n    value: PropTypes.any\n  };\n  static defaultProps = {\n    format: _.identity,\n    style: {\n      fontFamily: \"Helvetica, sans-serif\",\n      fontSize: '20px',\n      lineHeight: 1,\n      textAnchor: 'middle'\n    }\n  };\n  static getLabel(props) {\n    const {value, format} = props;\n    const style = _.defaults(props.style, MeasuredValueLabel.defaultProps.style);\n    const labelStr = format(value);\n    const measured = measureText(_.assign({text: labelStr}, style));\n\n    return {\n      value: props.value,\n      text: measured.text,\n      height: measured.height.value,\n      width: measured.width.value\n    };\n  }\n\n  render() {\n    const {value, format} = this.props;\n    const passedProps = _.omit(this.props, ['value', 'format']);\n\n    return <text {...passedProps}>\n      {React.Children.count(this.props.children) ?\n        this.props.children : format(value)\n      }\n    </text>;\n  }\n}\n\n"]}