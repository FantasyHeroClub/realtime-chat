{"version":3,"sources":["../src/RangeBarChart.js"],"names":["CustomPropTypes","RangeBarChart","nextProps","nextState","shouldUpdate","props","xScale","yScale","data","horizontal","x","xEnd","y","yEnd","barThickness","barClassName","barStyle","map","d","i","callback","get","eventName","isFunction","partial","onMouseEnter","onMouseMove","onMouseLeave","barProps","undefined","key","thickness","className","style","xScaleType","yScaleType","rangeAxis","rangeStartAccessor","rangeEndAccessor","rangeScaleType","rangeDataType","xDomain","yDomain","P","barsDomain","barsScale","barsAccessor","barsDataDomain","first","last","sortBy","domainHead","domainTail","dataDomainHead","dataDomainTail","clamp","spacingTail","spacingHead","spacingTop","spacingBottom","spacingLeft","spacingRight","Component","propTypes","array","bool","valueOrAccessor","func","number","oneOfType","object","string","onMouseMoveBar","onMouseEnterBar","onMouseLeaveBar","defaultProps"],"mappings":"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","file":"RangeBarChart.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport invariant from 'invariant';\nimport PropTypes from 'prop-types';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\nimport {hasXYScales, dataTypeFromScaleType} from './utils/Scale';\nimport {makeAccessor2, getValue, domainFromRangeData, domainFromData, getDataDomainByAxis} from './utils/Data';\nimport xyPropsEqual from './utils/xyPropsEqual';\nimport Bar from './Bar';\n\n/**\n *\n * `RangeBarChart` is a variation on the standard bar chart. Just like a normal bar chart, each bar represents a single\n * value on the *independent* axis (X axis for vertical bars), and is centered on this value.\n * However, on the *dependent* axis, each bar represents a *range* (min/max) of values,\n * rather than always starting at zero.\n */\n\nexport default class RangeBarChart extends React.Component {\n  static propTypes = {\n    /**\n     * Array of data to be plotted. One bar will be rendered per datum in this array.\n     */\n    data: PropTypes.array,\n    /**\n     * Boolean which determines whether the chart will use horizontal or vertical bars.\n     * When `true`, bars will be horizontal, ie. the X-axis will be treated as the dependent axis.\n     */\n    horizontal: PropTypes.bool,\n\n    /**\n     * Accessor function for bar X values, called once per bar (datum), or a single value to be used for all bars.\n     * If `horizontal` is `false`, this gets the *independent* variable value on which the bar is centered.\n     * If `horizontal` is `true`, this gets the start (minimum value) of the *dependent* variable range which is spanned by the bar's length.\n     */\n    x: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for the end (maximum X values) of the *dependent* variable range which is spanned by the bar's length,\n     * or a single value to be used for all bars.\n     * Should only be passed when `horizontal` is `true` (ignored otherwise).\n     */\n    xEnd: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for bar Y values, called once per bar (datum), or a single value to be used for all bars.\n     * If `horizontal` is `false`, this gets the start (minimum value) of the *dependent* variable range which is spanned by the bar's length.\n     * If `horizontal` is `true`, this gets the *independent* variable value on which the bar is centered.\n     */\n    y: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for the end (maximum Y-value) of the *dependent* variable range which is spanned by the bar's length,\n     * or a single value to be used for all bars.\n     * Should only be passed when `horizontal` is `false` (ignored otherwise).\n     */\n    yEnd: CustomPropTypes.valueOrAccessor,\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func,\n    /**\n     * Thickness (in pixels) of each bar (ie. bar height if `horizontal` is `true`, otherwise bar width),\n     */\n    barThickness: PropTypes.number,\n    // barThickness: PropTypes.oneOfType([PropTypes.number, PropTypes.func]), // todo\n\n    /**\n     * Inline style object to be applied to each bar,\n     * or accessor function which returns a style object;\n     */\n    barStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Class attribute to be applied to each bar.\n     * or accessor function which returns a class;\n     */\n    barClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n    /**\n     * `mousemove` event handler callback, called when user's mouse moves within a bar.\n     */\n    onMouseMoveBar: PropTypes.func,\n    /**\n     * `mouseenter` event handler callback, called when user's mouse enters a bar.\n     */\n    onMouseEnterBar: PropTypes.func,\n    /**\n     * `mouseleave` event handler callback, called when user's mouse leaves a bar.\n     */\n    onMouseLeaveBar: PropTypes.func\n  };\n  static defaultProps = {\n    data: [],\n    horizontal: false,\n    barThickness: 8,\n    barClassName: '',\n    barStyle: {}\n  };\n\n  static getDomain(props) {\n    const {xScaleType, yScaleType, horizontal, data, x, xEnd, y, yEnd} = props;\n\n    // only have to specify range axis domain, other axis uses default domainFromData\n    const rangeAxis = horizontal ? 'x' : 'y';\n    const rangeStartAccessor = horizontal ? makeAccessor2(x) : makeAccessor2(y);\n    const rangeEndAccessor = horizontal ? makeAccessor2(xEnd) : makeAccessor2(yEnd);\n    const rangeScaleType = horizontal ? xScaleType : yScaleType;\n    const rangeDataType = dataTypeFromScaleType(rangeScaleType);\n\n    return {\n      [`${rangeAxis}Domain`]: domainFromRangeData(data, rangeStartAccessor, rangeEndAccessor, rangeDataType)\n    };\n  }\n  static getSpacing(props) {\n    const {barThickness, horizontal, x, y, xScale, yScale, data, xDomain, yDomain} = props;\n    const P = barThickness / 2; //padding\n    const barsDomain = horizontal ? yDomain : xDomain;\n    const barsScale = horizontal ? yScale : xScale;\n    const barsAccessor = horizontal ? makeAccessor2(y) : makeAccessor2(x);\n    const barsDataDomain = domainFromData(data, barsAccessor);\n\n    // todo refactor/add better comments to clarify\n    //find the edges of the tick domain, and map them through the scale function\n    const [domainHead, domainTail] = _([_.first(barsDomain), _.last(barsDomain)]).map(barsScale).sortBy(); //sort the pixel values return by the domain extents\n    //find the edges of the data domain, and map them through the scale function\n    const [dataDomainHead, dataDomainTail] = _([_.first(barsDataDomain), _.last(barsDataDomain)]).map(barsScale).sortBy(); //sort the pixel values return by the domain extents\n    //find the necessary spacing (based on bar width) to push the bars completely inside the tick domain\n    const [spacingTail, spacingHead] = [\n      _.clamp(P - (domainTail - dataDomainTail), 0, P),\n      _.clamp(P - (dataDomainHead - domainHead), 0, P)\n    ];\n    if(horizontal) {\n      return {spacingTop: spacingHead, spacingBottom: spacingTail, spacingLeft: 0, spacingRight: 0};\n    } else {\n      return {spacingTop: 0, spacingBottom: 0, spacingLeft: spacingHead, spacingRight: spacingTail}\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, ['barStyle']);\n    return shouldUpdate;\n  }\n\n  render() {\n    const {xScale, yScale, data, horizontal, x, xEnd, y, yEnd, barThickness, barClassName, barStyle} = this.props;\n    // invariant(hasOneOfTwo(xEnd, yEnd), `RangeBarChart expects a xEnd *or* yEnd prop, but not both.`);\n\n    return <g>\n      {data.map((d, i) => {\n        const [onMouseEnter, onMouseMove, onMouseLeave] =\n          ['onMouseEnterBar', 'onMouseMoveBar', 'onMouseLeaveBar'].map(eventName => {\n            // partially apply this bar's data point as 2nd callback argument\n            const callback = _.get(this.props, eventName);\n            return _.isFunction(callback) ? _.partial(callback, _, d) : null;\n        });\n\n        const barProps = {\n          x: getValue(x, d, i),\n          y: getValue(y, d, i),\n          xEnd: horizontal ? getValue(xEnd, d, i) : undefined,\n          yEnd: horizontal ? undefined : getValue(yEnd, d, i),\n          xScale, yScale,\n          key: `chart-bar-${i}`,\n          onMouseEnter,\n          onMouseMove,\n          onMouseLeave,\n          thickness: barThickness,\n          className: `chart-bar ${getValue(barClassName, d, i) || ''}`,\n          style: getValue(barStyle, d, i)\n        };\n\n        return <Bar {...barProps}/>;\n\n        // console.log('xEnd yEnd value', getValue(xEnd, d), getValue(yEnd, d), horizontal);\n        return horizontal ?\n          <Bar xEnd={getValue(xEnd, d, i)} {...barProps} /> :\n          <Bar yEnd={getValue(yEnd, d, i)} {...barProps} />;\n      })}\n    </g>;\n  }\n}\n"]}