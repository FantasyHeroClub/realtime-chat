{"version":3,"sources":["../src/MarkerLineChart.js"],"names":["CustomPropTypes","getTickType","props","xEnd","yEnd","horizontal","isUndefined","console","warn","MarkerLineChart","onMouseEnterLine","e","d","onMouseMoveLine","onMouseLeaveLine","renderRangeValueLine","i","map","callback","eventName","isFunction","partial","onMouseEnter","onMouseMove","onMouseLeave","x","y","xScale","yScale","xVal","yVal","xEndVal","yEndVal","x1","y1","x2","y2","key","every","isFinite","renderValueValueLine","lineLength","nextProps","nextState","shouldUpdate","tickType","data","spacingTop","spacingRight","spacingBottom","spacingLeft","xDomain","yDomain","P","markDomain","markScale","markAccessor","markDataDomain","first","last","sortBy","domainHead","domainTail","dataDomainHead","dataDomainTail","clamp","spacingTail","spacingHead","xScaleType","yScaleType","rangeAxis","rangeStartAccessor","rangeEndAccessor","rangeDataType","Component","propTypes","array","isRequired","valueOrAccessor","bool","number","string","func","defaultProps"],"mappings":"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","file":"MarkerLineChart.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport {methodIfFuncProp} from './util.js';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\nimport {dataTypeFromScaleType} from './utils/Scale';\nimport {makeAccessor2, domainFromRangeData, domainFromData, getDataDomainByAxis} from './utils/Data';\nimport xyPropsEqual from './utils/xyPropsEqual';\n\n/**\n * MarkerLine is similar to a bar chart,\n * except that it just draws a line at the data value, rather than a full bar.\n * If the independent variable is a range, the length of the line will represent that range,\n * otherwise all lines will be the same length.\n * The dependent variable must be a single value, not a range.\n */\n\nfunction getTickType(props) {\n  const {xEnd, yEnd, horizontal} = props;\n  // warn if a range is passed for the dependent variable, which is expected to be a value\n  if((!horizontal && !_.isUndefined(yEnd)) || (horizontal && !_.isUndefined(xEnd)))\n    console.warn(\"Warning: MarkerLineChart can only show the independent variable as a range, not the dependent variable.\");\n\n  if((!horizontal && !_.isUndefined(xEnd)) || (horizontal && !_.isUndefined(yEnd)))\n    return \"RangeValue\";\n\n  return \"ValueValue\";\n}\n\n\nexport default class MarkerLineChart extends React.Component {\n  static propTypes = {\n    // the array of data objects\n    data: PropTypes.array.isRequired,\n    // accessor for X & Y coordinates\n    x: CustomPropTypes.valueOrAccessor,\n    y: CustomPropTypes.valueOrAccessor,\n    xEnd: CustomPropTypes.valueOrAccessor,\n    yEnd: CustomPropTypes.valueOrAccessor,\n\n    horizontal: PropTypes.bool,\n    lineLength: PropTypes.number,\n\n    // x & y scale types\n    xScaleType: PropTypes.string,\n    yScaleType: PropTypes.string,\n    xScale: PropTypes.func,\n    yScale: PropTypes.func,\n\n    onMouseEnterLine: PropTypes.func,\n    onMouseMoveLine: PropTypes.func,\n    onMouseLeaveLine: PropTypes.func\n  };\n  static defaultProps = {\n    horizontal: false,\n    lineLength: 10\n  };\n\n  // todo reimplement padding/spacing\n  /*\n  static getOptions(props) {\n    const {data, getX, getXEnd, getY, getYEnd, scaleType, orientation, lineLength} = props;\n    const tickType = getTickType(props);\n    const isVertical = (orientation === 'vertical');\n    const accessors = {x: makeAccessor(getX), y: makeAccessor(getY)};\n    const endAccessors = {x: makeAccessor(getXEnd), y: makeAccessor(getYEnd)};\n\n    let options = {domain: {}, spacing: {}};\n\n    if(tickType === 'RangeValue') { // set range domain for range type\n      let rangeAxis = isVertical ? 'x' : 'y';\n      options.domain[rangeAxis] =\n        rangeAxisDomain(data, accessors[rangeAxis], endAccessors[rangeAxis], scaleType[rangeAxis]);\n    } else {\n      // the value, and therefore the center of the marker line, may fall exactly on the axis min or max,\n      // therefore marker lines need (0.5*lineLength) spacing so they don't hang over the edge of the chart\n      const halfLine = Math.ceil(0.5 * lineLength);\n      options.spacing = isVertical ? {left: halfLine, right: halfLine} : {top: halfLine, bottom: halfLine};\n    }\n\n    return options;\n  }\n  */\n\n  static getSpacing(props) {\n    const tickType = getTickType(props);\n    //no spacing for rangeValue marker charts since line start and end are set explicitly\n    if(tickType === 'RangeValue') return {spacingTop: 0, spacingRight: 0, spacingBottom: 0, spacingLeft: 0};\n\n    const {lineLength, horizontal, data, xDomain, yDomain, xScale, yScale, x, y} = props;\n    const P = lineLength / 2; //padding\n    const markDomain = horizontal ? yDomain : xDomain;\n    const markScale = horizontal ? yScale : xScale;\n    const markAccessor = horizontal ? makeAccessor2(y) : makeAccessor2(x);\n    const markDataDomain = domainFromData(data, markAccessor);\n\n    // todo refactor/add better comments to clarify\n    // find the edges of the tick domain, and map them through the scale function\n    const [domainHead, domainTail] = _([_.first(markDomain), _.last(markDomain)]).map(markScale).sortBy(); //sort the pixel values return by the domain extents\n    // find the edges of the data domain, and map them through the scale function\n    const [dataDomainHead, dataDomainTail] = _([_.first(markDataDomain), _.last(markDataDomain)]).map(markScale).sortBy(); //sort the pixel values return by the domain extents\n    // find the necessary spacing (based on bar width) to push the bars completely inside the tick domain\n    const [spacingTail, spacingHead] = [\n      _.clamp(P - (domainTail - dataDomainTail), 0, P),\n      _.clamp(P - (dataDomainHead - domainHead), 0, P)\n    ];\n\n    if(horizontal) {\n      return {spacingTop: spacingHead, spacingBottom: spacingTail, spacingLeft: 0, spacingRight: 0};\n    } else {\n      return {spacingTop: 0, spacingBottom: 0, spacingLeft: spacingHead, spacingRight: spacingTail}\n    }\n  }\n\n  static getDomain(props) {\n    if(getTickType(props) === 'RangeValue') { // set range domain for range type\n      const {data, x, xEnd, y, yEnd, xScaleType, yScaleType, horizontal} = props;\n\n      // only have to specify range axis domain, other axis uses default domainFromData\n      // in this chart type, the range axis, if there is one, is always the *independent* variable\n      const rangeAxis = horizontal ? 'y' : 'x';\n      const rangeStartAccessor = horizontal ? makeAccessor2(y) : makeAccessor2(x);\n      const rangeEndAccessor = horizontal ? makeAccessor2(yEnd) : makeAccessor2(xEnd);\n      const rangeDataType = dataTypeFromScaleType(horizontal ? yScaleType : xScaleType);\n\n      return {\n        [`${rangeAxis}Domain`]: domainFromRangeData(data, rangeStartAccessor, rangeEndAccessor, rangeDataType)\n      };\n    } else {\n      return {};\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, []);\n    return shouldUpdate;\n  }\n\n  onMouseEnterLine = (e, d) => {\n    this.props.onMouseEnterLine(e, d);\n  };\n  onMouseMoveLine = (e, d) => {\n    this.props.onMouseMoveLine(e, d);\n  };\n  onMouseLeaveLine = (e, d) => {\n    this.props.onMouseLeaveLine(e, d);\n  };\n\n  render() {\n    const tickType = getTickType(this.props);\n    return <g className=\"marker-line-chart\">\n      {tickType === 'RangeValue' ?\n        this.props.data.map(this.renderRangeValueLine) :\n        this.props.data.map(this.renderValueValueLine)\n      }\n    </g>\n  }\n\n  renderRangeValueLine = (d, i) => {\n    const [onMouseEnter, onMouseMove, onMouseLeave] =\n      ['onMouseEnterLine', 'onMouseMoveLine', 'onMouseLeaveLine'].map(eventName => {\n        // partially apply this bar's data point as 2nd callback argument\n        const callback = methodIfFuncProp(eventName, this.props, this);\n        return _.isFunction(callback) ? _.partial(callback, _, d) : null;\n      });\n\n    const {x, xEnd, y, yEnd, horizontal, xScale, yScale} = this.props;\n    const xVal = xScale(makeAccessor2(x)(d));\n    const yVal = yScale(makeAccessor2(y)(d));\n    const xEndVal = _.isUndefined(xEnd) ? 0 : xScale(makeAccessor2(xEnd)(d));\n    const yEndVal = _.isUndefined(yEnd) ? 0 : yScale(makeAccessor2(yEnd)(d));\n    const [x1, y1] = [xVal, yVal];\n    const x2 = horizontal ?  xVal : xEndVal;\n    const y2 = horizontal ? yEndVal : yVal;\n    const key = `marker-line-${i}`;\n\n    if(!_.every([x1, x2, y1, y2], _.isFinite)) return null;\n    return <line className=\"marker-line\" {...{x1, x2, y1, y2, key, onMouseEnter, onMouseMove, onMouseLeave}} />\n  };\n\n  renderValueValueLine = (d, i) => {\n    const [onMouseEnter, onMouseMove, onMouseLeave] =\n      ['onMouseEnterLine', 'onMouseMoveLine', 'onMouseLeaveLine'].map(eventName => {\n        // partially apply this bar's data point as 2nd callback argument\n        const callback = methodIfFuncProp(eventName, this.props, this);\n        return _.isFunction(callback) ? _.partial(callback, _, d) : null;\n      });\n\n    const {x, y, horizontal, lineLength, xScale, yScale} = this.props;\n    const xVal = xScale(makeAccessor2(x)(d));\n    const yVal = yScale(makeAccessor2(y)(d));\n    const x1 = (!horizontal) ? xVal - (lineLength / 2) : xVal;\n    const x2 = (!horizontal) ? xVal + (lineLength / 2) : xVal;\n    const y1 = (!horizontal) ? yVal : yVal - (lineLength / 2);\n    const y2 = (!horizontal) ? yVal : yVal + (lineLength / 2);\n    const key = `marker-line-${i}`;\n\n    if(!_.every([x1, x2, y1, y2], _.isFinite)) return null;\n    return <line className=\"marker-line\" {...{x1, x2, y1, y2, key, onMouseEnter, onMouseMove, onMouseLeave}} />;\n  };\n}\n"]}