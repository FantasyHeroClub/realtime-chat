{"version":3,"sources":["../src/ScatterPlot.js"],"names":["CustomPropTypes","ScatterPlot","onMouseEnterPoint","e","d","props","onMouseMovePoint","onMouseLeavePoint","renderPoint","i","map","callback","eventName","isFunction","partial","onMouseEnter","onMouseMove","onMouseLeave","scale","getX","getY","pointRadius","pointOffset","pointStyle","getClass","pointSymbol","className","symbolProps","key","isString","isNumber","type","isUndefined","r","cx","x","cy","y","assign","style","textAnchor","dominantBaseline","transform","cloneElement","nextProps","nextState","shouldUpdate","name","data","Component","propTypes","array","isRequired","getter","scaleType","object","number","oneOfType","node","func","arrayOf","defaultProps"],"mappings":"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","file":"ScatterPlot.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nimport {makeAccessor} from './utils/Data';\nimport {methodIfFuncProp} from './util.js';\nimport xyPropsEqual from './utils/xyPropsEqual';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\n\nexport default class ScatterPlot extends React.Component {\n  static propTypes = {\n    // the array of data objects\n    data: PropTypes.array.isRequired,\n    // accessors for X & Y coordinates\n    getX: CustomPropTypes.getter,\n    getY: CustomPropTypes.getter,\n    // allow user to pass an accessor for setting the class of a point\n    getClass: CustomPropTypes.getter,\n\n    scaleType: PropTypes.object,\n    scale: PropTypes.object,\n\n    // used with the default point symbol (circle), defines the circle radius\n    pointRadius: PropTypes.number,\n    // text or SVG node to use as custom point symbol, or function which returns text/SVG\n    pointSymbol: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    // manual x and y offset applied to the point to center it, for custom point symbols which can't be auto-centered\n    pointOffset: PropTypes.arrayOf(PropTypes.number),\n    // inline styles for points\n    pointStyle: PropTypes.object,\n\n    onMouseEnterPoint: PropTypes.func,\n    onMouseMovePoint: PropTypes.func,\n    onMouseLeavePoint: PropTypes.func\n  };\n  static defaultProps = {\n    pointRadius: 3,\n    pointSymbol: <circle />,\n    pointOffset: [0,0],\n    pointStyle: {}\n  };\n\n  // todo: implement getSpacing or getPadding static\n\n  onMouseEnterPoint = (e, d) => {\n    this.props.onMouseEnterPoint(e, d);\n  };\n  onMouseMovePoint = (e, d) => {\n    this.props.onMouseMovePoint(e, d);\n  };\n  onMouseLeavePoint = (e, d) => {\n    this.props.onMouseLeavePoint(e, d);\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, ['pointStyle']);\n    return shouldUpdate;\n  }\n\n  render() {\n    return <g className={this.props.name}>\n      {this.props.data.map(this.renderPoint)}\n    </g>\n  }\n  renderPoint = (d, i) => {\n    const [onMouseEnter, onMouseMove, onMouseLeave] =\n      ['onMouseEnterPoint', 'onMouseMovePoint', 'onMouseLeavePoint'].map(eventName => {\n        // partially apply this bar's data point as 2nd callback argument\n        const callback = methodIfFuncProp(eventName, this.props, this);\n        return _.isFunction(callback) ? _.partial(callback, _, d) : null;\n      });\n    const {scale, getX, getY, pointRadius, pointOffset, pointStyle, getClass} = this.props;\n    let {pointSymbol} = this.props;\n    const className = `chart-scatterplot-point ${getClass ? makeAccessor(getClass)(d) : ''}`;\n    let symbolProps = {className, onMouseEnter, onMouseMove, onMouseLeave, key: `scatter-point-${i}`};\n\n    // resolve symbol-generating functions into real symbols\n    if(_.isFunction(pointSymbol)) pointSymbol = pointSymbol(d, i);\n    // wrap string/number symbols in <text> container\n    if(_.isString(pointSymbol) || _.isNumber(pointSymbol)) pointSymbol = <text>{pointSymbol}</text>;\n    // use props.pointRadius for circle radius\n    if(pointSymbol.type === 'circle' && _.isUndefined(pointSymbol.props.r)) symbolProps.r = pointRadius;\n\n    // x,y coords of center of symbol\n    const cx = scale.x(makeAccessor(getX)(d)) + pointOffset[0];\n    const cy = scale.y(makeAccessor(getY)(d)) + pointOffset[1];\n\n    // set positioning attributes based on symbol type\n    if(pointSymbol.type === 'circle' || pointSymbol.type === 'ellipse') {\n      _.assign(symbolProps, {cx, cy, style: pointStyle});\n    } else if(pointSymbol.type === 'text') {\n      _.assign(symbolProps, {x: cx, y: cy, style: {textAnchor: 'middle', dominantBaseline: 'central', ...pointStyle}});\n    } else {\n      _.assign(symbolProps, {x: cx, y: cy, style: {transform: \"translate(-50%, -50%)\", ...pointStyle}});\n    }\n\n    return React.cloneElement(pointSymbol, symbolProps);\n  }\n}\n"]}