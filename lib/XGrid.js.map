{"version":3,"sources":["../src/XGrid.js"],"names":["XGrid","props","height","spacing","tickCount","lineClassName","lineStyle","scale","x","ticks","className","map","tick","i","value","style","key","get","defaults","defaultProps","Component","propTypes","shape","func","isRequired","width","number","nice","bool","array","string","object"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;;;;;;;;;IAGqBA,K;;;;;;;;;;;6BAsBV;AAAA;;AAAA,mBACwD,KAAKC,KAD7D;AAAA,UACAC,MADA,UACAA,MADA;AAAA,UACQC,OADR,UACQA,OADR;AAAA,UACiBC,SADjB,UACiBA,SADjB;AAAA,UAC4BC,aAD5B,UAC4BA,aAD5B;AAAA,UAC2CC,SAD3C,UAC2CA,SAD3C;;AAEP,UAAMC,QAAQ,KAAKN,KAAL,CAAWM,KAAX,CAAiBC,CAA/B;AACA,UAAMC,QAAQ,KAAKR,KAAL,CAAWQ,KAAX,IAAoB,0BAAcF,KAAd,EAAqB,IAArB,EAA2BH,SAA3B,CAAlC;AACA,UAAMM,oDAAiDL,iBAAiB,EAAlE,CAAN;;AAEA,aAAO;AAAA;AAAA,UAAG,WAAU,cAAb;AACJI,cAAME,GAAN,CAAU,UAACC,IAAD,EAAOC,CAAP,EAAa;AACtB,iBAAO,+CAAW;AAChBX,0BADgB,EACRQ,oBADQ,EACGP,gBADH;AAEhBI,mBAAO,OAAKN,KAAL,CAAWM,KAFF;AAGhBO,mBAAOF,IAHS;AAIhBG,mBAAOT,SAJS;AAKhBU,kCAAoBH;AALJ,WAAX,CAAP;AAOD,SARA;AADI,OAAP;AAWD;;;kCAvBoBZ,K,EAAO;AAC1B,UAAG,CAAC,iBAAEgB,GAAF,CAAMhB,KAAN,EAAa,SAAb,CAAJ,EAA6B;AAC7BA,cAAQ,iBAAEiB,QAAF,CAAW,EAAX,EAAejB,KAAf,EAAsBD,MAAMmB,YAA5B,CAAR;AACA,aAAO,EAACX,GAAG,0BAAcP,MAAMM,KAAN,CAAYC,CAA1B,EAA6BP,KAA7B,CAAJ,EAAP;AACD;;;;EApBgC,gBAAMmB,S;;AAApBpB,K,CACZqB,S,GAAY;AACjBd,SAAO,oBAAUe,KAAV,CAAgB,EAACd,GAAG,oBAAUe,IAAV,CAAeC,UAAnB,EAAhB,CADU;AAEjBC,SAAO,oBAAUC,MAFA;AAGjBxB,UAAQ,oBAAUwB,MAHD;AAIjBC,QAAM,oBAAUC,IAJC;AAKjBnB,SAAO,oBAAUoB,KALA;AAMjBzB,aAAW,oBAAUsB,MANJ;AAOjBrB,iBAAe,oBAAUyB,MAPR;AAQjBxB,aAAW,oBAAUyB;AARJ,C;AADA/B,K,CAWZmB,Y,GAAe;AACpBQ,QAAM,IADc;AAEpBrB,aAAW;AAFS,C;kBAXHN,K","file":"XGrid.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport {getScaleTicks, getTickDomain} from './utils/Scale';\nimport XLine from './XLine';\n\n\nexport default class XGrid extends React.Component {\n  static propTypes = {\n    scale: PropTypes.shape({x: PropTypes.func.isRequired}),\n    width: PropTypes.number,\n    height: PropTypes.number,\n    nice: PropTypes.bool,\n    ticks: PropTypes.array,\n    tickCount: PropTypes.number,\n    lineClassName: PropTypes.string,\n    lineStyle: PropTypes.object\n  };\n  static defaultProps = {\n    nice: true,\n    lineStyle: {}\n  };\n\n  static getTickDomain(props) {\n    if(!_.get(props, 'scale.x')) return;\n    props = _.defaults({}, props, XGrid.defaultProps);\n    return {x: getTickDomain(props.scale.x, props)};\n  }\n\n  render() {\n    const {height, spacing, tickCount, lineClassName, lineStyle} = this.props;\n    const scale = this.props.scale.x;\n    const ticks = this.props.ticks || getScaleTicks(scale, null, tickCount);\n    const className = `chart-grid-line chart-grid-line-x ${lineClassName || ''}`;\n\n    return <g className=\"chart-grid-x\">\n      {ticks.map((tick, i) => {\n        return <XLine {...{\n          height, className, spacing,\n          scale: this.props.scale,\n          value: tick,\n          style: lineStyle,\n          key: `grid-x-line-${i}`\n        }} />;\n      })}\n    </g>;\n  }\n}\n"]}