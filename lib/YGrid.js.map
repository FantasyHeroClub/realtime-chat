{"version":3,"sources":["../src/YGrid.js"],"names":["YGrid","props","width","spacing","tickCount","lineClassName","lineStyle","scale","y","ticks","className","map","tick","i","value","style","key","get","defaults","defaultProps","Component","propTypes","shape","func","isRequired","number","height","nice","bool","array","string","object"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;IAEqBA,K;;;;;;;;;;;6BAsBV;AAAA;;AAAA,mBACuD,KAAKC,KAD5D;AAAA,UACAC,KADA,UACAA,KADA;AAAA,UACOC,OADP,UACOA,OADP;AAAA,UACgBC,SADhB,UACgBA,SADhB;AAAA,UAC2BC,aAD3B,UAC2BA,aAD3B;AAAA,UAC0CC,SAD1C,UAC0CA,SAD1C;;AAEP,UAAMC,QAAQ,KAAKN,KAAL,CAAWM,KAAX,CAAiBC,CAA/B;AACA,UAAMC,QAAQ,KAAKR,KAAL,CAAWQ,KAAX,IAAoB,0BAAcF,KAAd,EAAqB,IAArB,EAA2BH,SAA3B,CAAlC;AACA,UAAMM,oDAAiDL,iBAAiB,EAAlE,CAAN;;AAEA,aAAO;AAAA;AAAA,UAAG,WAAU,cAAb;AACJI,cAAME,GAAN,CAAU,UAACC,IAAD,EAAOC,CAAP,EAAa;AACtB,iBAAO,+CAAW;AAChBH,gCADgB,EACLP,gBADK;AAEhBI,mBAAO,OAAKN,KAAL,CAAWM,KAFF;AAGhBO,mBAAOF,IAHS;AAIhBV,mBAAOA,KAJS;AAKhBa,mBAAOT,SALS;AAMhBU,kCAAoBH;AANJ,WAAX,CAAP;AAQD,SATA;AADI,OAAP;AAYD;;;kCAxBoBZ,K,EAAO;AAC1B,UAAG,CAAC,iBAAEgB,GAAF,CAAMhB,KAAN,EAAa,SAAb,CAAJ,EAA6B;AAC7BA,cAAQ,iBAAEiB,QAAF,CAAW,EAAX,EAAejB,KAAf,EAAsBD,MAAMmB,YAA5B,CAAR;AACA,aAAO,EAACX,GAAG,0BAAcP,MAAMM,KAAN,CAAYC,CAA1B,EAA6BP,KAA7B,CAAJ,EAAP;AACD;;;;EApBgC,gBAAMmB,S;;AAApBpB,K,CACZqB,S,GAAY;AACjBd,SAAO,oBAAUe,KAAV,CAAgB,EAACd,GAAG,oBAAUe,IAAV,CAAeC,UAAnB,EAAhB,CADU;AAEjBtB,SAAO,oBAAUuB,MAFA;AAGjBC,UAAQ,oBAAUD,MAHD;AAIjBE,QAAM,oBAAUC,IAJC;AAKjBnB,SAAO,oBAAUoB,KALA;AAMjBzB,aAAW,oBAAUqB,MANJ;AAOjBpB,iBAAe,oBAAUyB,MAPR;AAQjBxB,aAAW,oBAAUyB;AARJ,C;AADA/B,K,CAWZmB,Y,GAAe;AACpBQ,QAAM,IADc;AAEpBrB,aAAW;AAFS,C;kBAXHN,K","file":"YGrid.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport YLine from './YLine';\nimport {getScaleTicks, getTickDomain} from './utils/Scale';\n\nexport default class YGrid extends React.Component {\n  static propTypes = {\n    scale: PropTypes.shape({y: PropTypes.func.isRequired}),\n    width: PropTypes.number,\n    height: PropTypes.number,\n    nice: PropTypes.bool,\n    ticks: PropTypes.array,\n    tickCount: PropTypes.number,\n    lineClassName: PropTypes.string,\n    lineStyle: PropTypes.object\n  };\n  static defaultProps = {\n    nice: true,\n    lineStyle: {}\n  };\n\n  static getTickDomain(props) {\n    if(!_.get(props, 'scale.y')) return;\n    props = _.defaults({}, props, YGrid.defaultProps);\n    return {y: getTickDomain(props.scale.y, props)};\n  }\n\n  render() {\n    const {width, spacing, tickCount, lineClassName, lineStyle} = this.props;\n    const scale = this.props.scale.y;\n    const ticks = this.props.ticks || getScaleTicks(scale, null, tickCount);\n    const className = `chart-grid-line chart-grid-line-y ${lineClassName || ''}`;\n\n    return <g className=\"chart-grid-y\">\n      {ticks.map((tick, i) => {\n        return <YLine {...{\n          className, spacing,\n          scale: this.props.scale,\n          value: tick,\n          width: width,\n          style: lineStyle,\n          key: `grid-y-line-${i}`\n        }} />;\n      })}\n    </g>;\n  }\n}\n"]}