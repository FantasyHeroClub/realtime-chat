{"version":3,"sources":["../src/AreaHeatmap.js"],"names":["CustomPropTypes","AreaHeatmap","onMouseEnter","e","props","onMouseLeave","onMouseMove","xScale","yScale","isFunction","boundBox","refs","background","getBoundingClientRect","x","clientX","left","y","clientY","top","invert","xVal","yVal","nextProps","nextState","shouldUpdate","data","area","xEnd","yEnd","scaleWidth","scaleHeight","rectClassName","rectStyle","map","areaAccessor","xAccessor","xEndAccessor","yAccessor","yEndAccessor","unitsPerPixel","Math","max","apply","d","i","abs","handlers","getter","xEndVal","yEndVal","areaVal","fullWidth","fullHeight","fullRectX","min","fullRectY","pixelArea","width","sqrt","height","rectX","rectY","every","isFinite","className","style","key","flatten","Component","propTypes","array","isRequired","valueOrAccessor","number","string","object","func","defaultProps"],"mappings":"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","file":"AreaHeatmap.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport {extent} from 'd3';\nimport PropTypes from 'prop-types';\n\nimport {methodIfFuncProp} from './util.js';\nimport {makeAccessor, makeAccessor2, getValue} from './utils/Data';\nimport xyPropsEqual from './utils/xyPropsEqual';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\n\nexport default class AreaHeatmap extends React.Component {\n  static propTypes = {\n    /**\n     * the array of data objects\n     */\n    data: PropTypes.array.isRequired,\n    x: CustomPropTypes.valueOrAccessor,\n    xEnd: CustomPropTypes.valueOrAccessor,\n    y: CustomPropTypes.valueOrAccessor,\n    yEnd: CustomPropTypes.valueOrAccessor,\n    area: CustomPropTypes.valueOrAccessor,\n    unitsPerPixel: PropTypes.number,\n    rectClassName: PropTypes.string,\n    rectStyle: PropTypes.object,\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func,\n  };\n  static defaultProps = {\n    rectClassName: '',\n    rectStyle: {}\n  };\n\n  static getDomain(props) {\n    const {data, x, xEnd, y, yEnd} = props;\n    return {\n      // x: extent(_.flatten([data.map(makeAccessor(getX)), data.map(makeAccessor(getXEnd))])),\n      x: extent(_.flatten([data.map(makeAccessor2(x)), data.map(makeAccessor2(xEnd))])),\n      y: extent(_.flatten([data.map(makeAccessor2(y)), data.map(makeAccessor2(yEnd))]))\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, ['rectStyle']);\n    return shouldUpdate;\n  }\n\n  onMouseEnter = (e) => {\n    this.props.onMouseEnter(e);\n  };\n  onMouseLeave = (e) => {\n    this.props.onMouseLeave(e);\n  };\n  onMouseMove = (e) => {\n    const {xScale, yScale, onMouseMove} = this.props;\n    if(!_.isFunction(onMouseMove)) return;\n\n    const boundBox = this.refs.background.getBoundingClientRect();\n    if(!boundBox) return;\n    const [x, y] = [e.clientX - (boundBox.left || 0), e.clientY - (boundBox.top || 0)];\n    const [xVal, yVal] = [xScale.invert(x), yScale.invert(y)];\n\n    onMouseMove(e, {xVal, yVal});\n  };\n\n  render() {\n    const {data, area, x, xEnd, y, yEnd, xScale, yScale, scaleWidth, scaleHeight, rectClassName, rectStyle}\n      = this.props;\n    const [areaAccessor, xAccessor, xEndAccessor, yAccessor, yEndAccessor] =\n      [area, x, xEnd, y, yEnd].map(makeAccessor2);\n\n    // to determine how many data units are represented by 1 square pixel of area,\n    // find the bin that would require the highest unit-per-pixel scale if its rectangle filled the whole container\n    const unitsPerPixel = this.props.unitsPerPixel ||\n      Math.max.apply(this, data.map((d, i) => {\n        // ratio of this bin's area (in data units) to the entire area of its container rectangle (in pixels)\n        return getValue(area, d, i) / Math.abs(\n          (xScale(getValue(xEnd, d, i)) - xScale(getValue(x, d, i))) * (yScale(getValue(yEnd, d, i)) - yScale(getValue(y, d, i)))\n        );\n      }));\n\n    const handlers = {\n      onMouseMove: methodIfFuncProp('onMouseMove', this.props, this),\n      onMouseEnter: methodIfFuncProp('onMouseEnter', this.props, this),\n      onMouseLeave: methodIfFuncProp('onMouseLeave', this.props, this)\n    };\n\n    return <g className=\"area-heatmap-chart\" {...handlers}>\n      <rect x=\"0\" y=\"0\" width={scaleWidth} height={scaleHeight} ref=\"background\" fill=\"transparent\" />\n      {data.map((d, i) => {\n        const [xVal, xEndVal, yVal, yEndVal, areaVal] = [x, xEnd, y, yEnd, area].map(getter => getValue(getter, d, i));\n        // full width and height of the containing rectangle\n        const fullWidth = Math.abs(xScale(xEndVal) - xScale(xVal));\n        const fullHeight = Math.abs(yScale(yEndVal) - yScale(yVal));\n        // x / y position of top left of the containing rectangle\n        const fullRectX = Math.min(xScale(xEndVal), xScale(xVal));\n        const fullRectY = Math.min(yScale(yEndVal), yScale(yVal));\n\n        // we know two facts:\n        // 1. the (pixel) area of the rect will be the data value divided by the # of data units per pixel\n        //    ie. area = height * width = areaVal / unitsPerPixel\n        const pixelArea = areaVal / unitsPerPixel;\n        // 2. all rectangles, regardless of size, have the same shape (are congruent), so the ratio\n        //    of the rect's width to the full width is equal to the ratio of its height to the full height.\n        //    ie. (height / fullHeight) = (width / fullWidth)\n        // solve for height and width to get...\n        const width = Math.sqrt(pixelArea * (fullWidth / fullHeight));\n        const height = Math.sqrt(pixelArea * (fullHeight / fullWidth));\n\n        // center the data rect in the containing rectangle\n        const rectX = fullRectX + ((fullWidth - width) / 2);\n        const rectY = fullRectY + ((fullHeight - height) / 2);\n\n        if(!_.every([rectX, rectY, width, height], _.isFinite)) return null;\n\n        const className = `area-heatmap-rect ${getValue(rectClassName, d, i)}`;\n        const style = getValue(rectStyle, d, i);\n        const key = `rect-${i}`;\n\n        return <rect {...{x: rectX, y: rectY, width, height, className, style, key}}/>;\n      })}\n    </g>;\n  }\n}\n"]}