{"version":3,"sources":["../src/AreaHeatmap.js"],"names":["AreaHeatmap","onMouseEnter","e","props","onMouseLeave","onMouseMove","scale","data","getArea","getX","getXEnd","getY","getYEnd","isFunction","boundBox","refs","background","getBoundingClientRect","x","clientX","left","y","clientY","top","invert","xVal","yVal","nextProps","nextState","shouldUpdate","scaleWidth","scaleHeight","rectClassName","rectStyle","map","areaAccessor","xAccessor","xEndAccessor","yAccessor","yEndAccessor","unitsPerPixel","Math","max","apply","d","abs","handlers","i","fullWidth","fullHeight","x0","min","y0","width","sqrt","height","every","isFinite","className","style","key","flatten","Component","propTypes","number","string","object","defaultProps"],"mappings":"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","file":"AreaHeatmap.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport {extent} from 'd3';\nimport PropTypes from 'prop-types';\n\nimport {methodIfFuncProp} from './util.js';\nimport {makeAccessor} from './utils/Data';\nimport xyPropsEqual from './utils/xyPropsEqual';\n\nexport default class AreaHeatmap extends React.Component {\n  static propTypes = {\n    unitsPerPixel: PropTypes.number,\n    rectClassName: PropTypes.string,\n    rectStyle: PropTypes.object\n  };\n  static defaultProps = {\n    rectClassName: '',\n    rectStyle: {}\n  };\n\n  static getDomain(props) {\n    const {data, getX, getXEnd, getY, getYEnd} = props;\n    return {\n      x: extent(_.flatten([data.map(makeAccessor(getX)), data.map(makeAccessor(getXEnd))])),\n      y: extent(_.flatten([data.map(makeAccessor(getY)), data.map(makeAccessor(getYEnd))]))\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, ['rectStyle']);\n    return shouldUpdate;\n  }\n\n  onMouseEnter = (e) => {\n    this.props.onMouseEnter(e);\n  };\n  onMouseLeave = (e) => {\n    this.props.onMouseLeave(e);\n  };\n  onMouseMove = (e) => {\n    const {scale, data, getArea, getX, getXEnd, getY, getYEnd, onMouseMove} = this.props;\n    if(!_.isFunction(onMouseMove)) return;\n    // const [xAccessor, xEndAccessor, yAccessor, yEndAccessor] =\n    //   [getArea, getX, getXEnd, getY, getYEnd].map(makeAccessor);\n\n    const boundBox = this.refs.background.getBoundingClientRect();\n    if(!boundBox) return;\n    const [x, y] = [e.clientX - (boundBox.left || 0), e.clientY - (boundBox.top || 0)];\n    const [xVal, yVal] = [scale.x.invert(x), scale.y.invert(y)];\n    //const xD = _.find(data, d => xVal >= xAccessor(d) && xVal < xEndAccessor(d));\n    //const yD = _.find(data, d => yVal >= yAccessor(d) && yVal < yEndAccessor(d));\n    //const d = _.find(data,\n    //    d => xVal >= xAccessor(d) && xVal < xEndAccessor(d) && yVal >= yAccessor(d) && yVal < yEndAccessor(d));\n    //const xBin = [xAccessor(xD), xEndAccessor(xD)];\n    //const yBin = [yAccessor(yD), yEndAccessor(yD)];\n\n    //onMouseMove(e, {xVal, yVal, d, xD, yD, xBin, yBin});\n    onMouseMove(e, {xVal, yVal});\n  };\n\n  render() {\n    const {data, getArea, getX, getXEnd, getY, getYEnd, scale, scaleWidth, scaleHeight, rectClassName, rectStyle}\n      = this.props;\n    const [areaAccessor, xAccessor, xEndAccessor, yAccessor, yEndAccessor] =\n      [getArea, getX, getXEnd, getY, getYEnd].map(makeAccessor);\n\n    // to determine how many data units are represented by 1 square pixel of area,\n    // find the bin that would require the highest unit-per-pixel scale if its rectangle filled the whole container\n    const unitsPerPixel = this.props.unitsPerPixel ||\n      Math.max.apply(this, data.map(d => areaAccessor(d) / Math.abs(\n        // area of entire containing rectangle\n        (scale.x(xEndAccessor(d)) - scale.x(xAccessor(d))) * (scale.y(yEndAccessor(d)) - scale.y(yAccessor(d)))\n      )));\n\n    const handlers = {\n      onMouseMove: methodIfFuncProp('onMouseMove', this.props, this),\n      onMouseEnter: methodIfFuncProp('onMouseEnter', this.props, this),\n      onMouseLeave: methodIfFuncProp('onMouseLeave', this.props, this)\n    };\n\n    return <g className=\"area-heatmap-chart\" {...handlers}>\n      <rect x=\"0\" y=\"0\" width={scaleWidth} height={scaleHeight} ref=\"background\" fill=\"transparent\" />\n      {data.map((d, i) => {\n        // full width and height of the containing rectangle\n        const fullWidth = Math.abs(scale.x(xEndAccessor(d)) - scale.x(xAccessor(d)));\n        const fullHeight = Math.abs(scale.y(yEndAccessor(d)) - scale.y(yAccessor(d)));\n        // x / y position of top left of the containing rectangle\n        const x0 = Math.min(scale.x(xEndAccessor(d)), scale.x(xAccessor(d)));\n        const y0 = Math.min(scale.y(yEndAccessor(d)), scale.y(yAccessor(d)));\n\n        // we know two facts:\n        // 1. the (pixel) area of the rect will be the data value divided by the # of data units per pixel\n        //    ie. area = height * width = areaAccessor(d) / unitsPerPixel\n        // 2. all rectangles, regardless of size, have the same shape (are congruent), so the ratio\n        //    of the rect's width to the full width is equal to the ratio of its height to the full height.\n        //    ie. (height / fullHeight) = (width / fullWidth)\n        // solve for height and width to get...\n        const width = Math.sqrt((areaAccessor(d) / unitsPerPixel) * (fullWidth / fullHeight));\n        const height = Math.sqrt((areaAccessor(d) / unitsPerPixel) * (fullHeight / fullWidth));\n\n        // center the data rect in the containing rectangle\n        const x = x0 + ((fullWidth - width) / 2);\n        const y = y0 + ((fullHeight - height) / 2);\n\n        if(!_.every([x, y, width, height], _.isFinite)) return null;\n\n        const className = `area-heatmap-rect ${rectClassName}`;\n        const style = rectStyle;\n        const key = `rect-${i}`;\n\n        return <rect {...{x, y, width, height, className, style, key}}/>;\n      })}\n    </g>;\n  }\n}\n"]}