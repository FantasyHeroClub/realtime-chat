{"version":3,"sources":["../src/XAxis.js"],"names":["XAxis","nextProps","nextState","props","width","height","position","spacing","tickLength","titleDistance","labelDistance","showTitle","showLabels","showTicks","showGrid","ticksProps","gridProps","labelsProps","titleProps","distance","labelsMargin","getMargin","axisLineY","bottom","top","axisLineWidth","left","right","get","defaults","defaultProps","x","scale","margins","push","title","Component","propTypes","shape","func","isRequired","number","string","placement","nice","bool","ticks","array","tickCount","titleAlign","titleRotate","titleStyle","object","labelClassName","labelStyle","labelFormat","oneOfType","labelFormats","labels","tickClassName","tickStyle","gridLineClassName","gridLineStyle","onMouseEnterLabel","onMouseMoveLabel","onMouseLeaveLabel"],"mappings":"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","file":"XAxis.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport shallowEqual from './utils/shallowEqual';\nimport PropTypes from 'prop-types';\n\nimport {getTickDomain, scaleEqual} from './utils/Scale';\nimport {sumMargins} from './utils/Margin';\nimport {getAxisChildProps} from './utils/Axis';\nimport xyPropsEqual from './utils/xyPropsEqual';\n\nimport XTicks from './XTicks';\nimport XGrid from './XGrid';\nimport XAxisLabels from './XAxisLabels';\nimport XAxisTitle from './XAxisTitle';\n\nexport default class XAxis extends React.Component {\n  static propTypes = {\n    scale: PropTypes.shape({x: PropTypes.func.isRequired}),\n\n    width: PropTypes.number,\n    height: PropTypes.number,\n    position: PropTypes.string,\n    placement: PropTypes.string,\n    nice: PropTypes.bool,\n    ticks: PropTypes.array,\n    tickCount: PropTypes.number,\n\n    showTitle: PropTypes.bool,\n    showLabels: PropTypes.bool,\n    showTicks: PropTypes.bool,\n    showGrid: PropTypes.bool,\n\n    title: PropTypes.string,\n    titleDistance: PropTypes.number,\n    titleAlign: PropTypes.string,\n    titleRotate: PropTypes.bool,\n    titleStyle: PropTypes.object,\n\n    labelDistance: PropTypes.number,\n    labelClassName: PropTypes.string,\n    labelStyle: PropTypes.object,\n    labelFormat: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    labelFormats: PropTypes.array,\n    labels: PropTypes.array,\n\n    tickLength: PropTypes.number,\n    tickClassName: PropTypes.string,\n    tickStyle: PropTypes.object,\n\n    gridLineClassName: PropTypes.string,\n    gridLineStyle: PropTypes.object,\n\n    onMouseEnterLabel: PropTypes.func,\n    onMouseMoveLabel: PropTypes.func,\n    onMouseLeaveLabel: PropTypes.func\n  };\n\n  static defaultProps = {\n    width: 400,\n    height: 250,\n    position: 'bottom',\n    nice: true,\n    showTitle: true,\n    showLabels: true,\n    showTicks: true,\n    showGrid: true,\n    tickLength: 5,\n    labelDistance: 3,\n    titleDistance: 5,\n    spacing: {top: 0, bottom: 0, left: 0, right: 0}\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !xyPropsEqual(this.props, nextProps);\n  }\n\n  static getTickDomain(props) {\n    if(!_.get(props, 'scale.x')) return;\n    props = _.defaults({}, props, XAxis.defaultProps);\n    return {x: getTickDomain(props.scale.x, props)};\n  }\n\n  static getMargin(props) {\n    // todo figure out margin if labels change after margin?\n    const {ticksProps, labelsProps, titleProps} = getAxisChildProps(props);\n    let margins = [];\n\n    if(props.showTicks)\n      margins.push(XTicks.getMargin(ticksProps));\n\n    if(props.showTitle && props.title)\n      margins.push(XAxisTitle.getMargin(titleProps));\n\n    if(props.showLabels)\n      margins.push(XAxisLabels.getMargin(labelsProps));\n\n    return sumMargins(margins);\n  }\n\n  render() {\n    const {\n      width, height, position, spacing, tickLength, titleDistance, labelDistance,\n      showTitle, showLabels, showTicks, showGrid\n    } = this.props;\n\n    const {ticksProps, gridProps, labelsProps, titleProps} = getAxisChildProps(this.props);\n\n    labelsProps.distance = labelDistance + (showTicks ? tickLength : 0);\n\n    if(showTitle && showLabels) {\n      // todo optimize so we don't generate labels twice\n      const labelsMargin = XAxisLabels.getMargin(labelsProps);\n      titleProps.distance = titleDistance + labelsMargin[position];\n    } else if(showTitle && showTicks) {\n      titleProps.distance = titleDistance + tickLength;\n    }\n\n    const axisLineY = (position === 'bottom') ?\n      height + spacing.bottom : -spacing.top;\n    // `width` is width of inner chart *not* including spacing - add spacing to figure out where to draw line\n    const axisLineWidth = width + spacing.left + spacing.right;\n\n    return <g className=\"chart-axis chart-axis-x\">\n      {showGrid ? <XGrid {...gridProps} /> : null}\n\n      {showTicks ? <XTicks {...ticksProps}/> : null}\n\n      {showLabels ? <XAxisLabels {...labelsProps} /> : null}\n\n      {showTitle ? <XAxisTitle {...titleProps} /> : null}\n\n      <line\n        className=\"chart-axis-line chart-axis-line-x\"\n        x1={-spacing.left} x2={width + spacing.right}\n        y1={axisLineY} y2={axisLineY}\n      />\n    </g>;\n  }\n}\n"]}